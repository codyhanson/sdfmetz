module Language.Sdf.TermInstances where

import Language.Sdf.Syntax
import TermRep

{- Generated by DrIFT (Automatic class derivations for Haskell) -}
{-# LINE 1 "Syntax.hs" #-}
{-* Generated by DrIFT : Look, but Don't Touch. *-}
instance Term Grammar where
    explode (x::Grammar) = TermRep (toDyn x, f x, g x) where
	f (Sdf_aliases aa) = [explode aa]
	f (Sdf_restrictions ab) = [explode ab]
	f (Sdf_sorts_ ac) = [explode ac]
	f (Sdf_priorities ad) = [explode ad]
	f (Sdf_imp_section ae) = [explode ae]
	f (Sdf_lexical_syntax af) = [explode af]
	f (Sdf_context_free_syntax ag) = [explode ag]
	f (Sdf_variables ah) = [explode ah]
	f (Sdf_lexical_variables ai) = [explode ai]
	f Sdf_empty_grammar = []
	f (Sdf_conc_grammars aj ak) = [explode aj,explode ak]
	f (Sdf_syntax al) = [explode al]
	f (Sdf_lexical_priorities am) = [explode am]
	f (Sdf_context_free_priorities an) = [explode an]
	f (Sdf_lexical_restrictions ao) = [explode ao]
	f (Sdf_context_free_restrictions ap) = [explode ap]
	g (Sdf_aliases _) xs = case TermRep.fArgs xs of [aa] -> toDyn ((Sdf_aliases (TermRep.fDyn aa))::Grammar) ; _ -> error "Term explosion error."
	g (Sdf_restrictions _) xs = case TermRep.fArgs xs of [ab] -> toDyn ((Sdf_restrictions (TermRep.fDyn ab))::Grammar) ; _ -> error "Term explosion error."
	g (Sdf_sorts_ _) xs = case TermRep.fArgs xs of [ac] -> toDyn ((Sdf_sorts_ (TermRep.fDyn ac))::Grammar) ; _ -> error "Term explosion error."
	g (Sdf_priorities _) xs = case TermRep.fArgs xs of [ad] -> toDyn ((Sdf_priorities (TermRep.fDyn ad))::Grammar) ; _ -> error "Term explosion error."
	g (Sdf_imp_section _) xs = case TermRep.fArgs xs of [ae] -> toDyn ((Sdf_imp_section (TermRep.fDyn ae))::Grammar) ; _ -> error "Term explosion error."
	g (Sdf_lexical_syntax _) xs = case TermRep.fArgs xs of [af] -> toDyn ((Sdf_lexical_syntax (TermRep.fDyn af))::Grammar) ; _ -> error "Term explosion error."
	g (Sdf_context_free_syntax _) xs = case TermRep.fArgs xs of [ag] -> toDyn ((Sdf_context_free_syntax (TermRep.fDyn ag))::Grammar) ; _ -> error "Term explosion error."
	g (Sdf_variables _) xs = case TermRep.fArgs xs of [ah] -> toDyn ((Sdf_variables (TermRep.fDyn ah))::Grammar) ; _ -> error "Term explosion error."
	g (Sdf_lexical_variables _) xs = case TermRep.fArgs xs of [ai] -> toDyn ((Sdf_lexical_variables (TermRep.fDyn ai))::Grammar) ; _ -> error "Term explosion error."
	g Sdf_empty_grammar xs = case TermRep.fArgs xs of [] -> toDyn ((Sdf_empty_grammar)::Grammar) ; _ -> error "Term explosion error."
	g (Sdf_conc_grammars _ _) xs = case TermRep.fArgs xs of [aj,ak] -> toDyn ((Sdf_conc_grammars (TermRep.fDyn aj) (TermRep.fDyn ak))::Grammar) ; _ -> error "Term explosion error."
	g (Sdf_syntax _) xs = case TermRep.fArgs xs of [al] -> toDyn ((Sdf_syntax (TermRep.fDyn al))::Grammar) ; _ -> error "Term explosion error."
	g (Sdf_lexical_priorities _) xs = case TermRep.fArgs xs of [am] -> toDyn ((Sdf_lexical_priorities (TermRep.fDyn am))::Grammar) ; _ -> error "Term explosion error."
	g (Sdf_context_free_priorities _) xs = case TermRep.fArgs xs of [an] -> toDyn ((Sdf_context_free_priorities (TermRep.fDyn an))::Grammar) ; _ -> error "Term explosion error."
	g (Sdf_lexical_restrictions _) xs = case TermRep.fArgs xs of [ao] -> toDyn ((Sdf_lexical_restrictions (TermRep.fDyn ao))::Grammar) ; _ -> error "Term explosion error."
	g (Sdf_context_free_restrictions _) xs = case TermRep.fArgs xs of [ap] -> toDyn ((Sdf_context_free_restrictions (TermRep.fDyn ap))::Grammar) ; _ -> error "Term explosion error."

_tc_GrammarTc = mkTyCon "Grammar"
instance Typeable Grammar where
    typeOf x = mkAppTy _tc_GrammarTc [ ]

instance Term Alias where
    explode (x::Alias) = TermRep (toDyn x, f x, g x) where
	f (Sdf_alias aa ab) = [explode aa,explode ab]
	g (Sdf_alias _ _) xs = case TermRep.fArgs xs of [aa,ab] -> toDyn ((Sdf_alias (TermRep.fDyn aa) (TermRep.fDyn ab))::Alias) ; _ -> error "Term explosion error."

_tc_AliasTc = mkTyCon "Alias"
instance Typeable Alias where
    typeOf x = mkAppTy _tc_AliasTc [ ]

instance Term Aliases where
    explode (x::Aliases) = TermRep (toDyn x, f x, g x) where
	f (Sdf_list aa) = [explode aa]
	g (Sdf_list _) xs = case TermRep.fArgs xs of [aa] -> toDyn ((Sdf_list (TermRep.fDyn aa))::Aliases) ; _ -> error "Term explosion error."

_tc_AliasesTc = mkTyCon "Aliases"
instance Typeable Aliases where
    typeOf x = mkAppTy _tc_AliasesTc [ ]

instance Term Lookahead where
    explode (x::Lookahead) = TermRep (toDyn x, f x, g x) where
	f (Sdf_char_class aa) = [explode aa]
	f (Sdf_seq ab ac) = [explode ab,explode ac]
	g (Sdf_char_class _) xs = case TermRep.fArgs xs of [aa] -> toDyn ((Sdf_char_class (TermRep.fDyn aa))::Lookahead) ; _ -> error "Term explosion error."
	g (Sdf_seq _ _) xs = case TermRep.fArgs xs of [ab,ac] -> toDyn ((Sdf_seq (TermRep.fDyn ab) (TermRep.fDyn ac))::Lookahead) ; _ -> error "Term explosion error."

_tc_LookaheadTc = mkTyCon "Lookahead"
instance Typeable Lookahead where
    typeOf x = mkAppTy _tc_LookaheadTc [ ]

instance Term Lookaheads where
    explode (x::Lookaheads) = TermRep (toDyn x, f x, g x) where
	f (Sdf_single aa) = [explode aa]
	f (Sdf_alt ab ac) = [explode ab,explode ac]
	f (Sdf_list1 ad) = [explode ad]
	g (Sdf_single _) xs = case TermRep.fArgs xs of [aa] -> toDyn ((Sdf_single (TermRep.fDyn aa))::Lookaheads) ; _ -> error "Term explosion error."
	g (Sdf_alt _ _) xs = case TermRep.fArgs xs of [ab,ac] -> toDyn ((Sdf_alt (TermRep.fDyn ab) (TermRep.fDyn ac))::Lookaheads) ; _ -> error "Term explosion error."
	g (Sdf_list1 _) xs = case TermRep.fArgs xs of [ad] -> toDyn ((Sdf_list1 (TermRep.fDyn ad))::Lookaheads) ; _ -> error "Term explosion error."

_tc_LookaheadsTc = mkTyCon "Lookaheads"
instance Typeable Lookaheads where
    typeOf x = mkAppTy _tc_LookaheadsTc [ ]

instance Term Restriction where
    explode (x::Restriction) = TermRep (toDyn x, f x, g x) where
	f (Sdf_follow aa ab) = [explode aa,explode ab]
	g (Sdf_follow _ _) xs = case TermRep.fArgs xs of [aa,ab] -> toDyn ((Sdf_follow (TermRep.fDyn aa) (TermRep.fDyn ab))::Restriction) ; _ -> error "Term explosion error."

_tc_RestrictionTc = mkTyCon "Restriction"
instance Typeable Restriction where
    typeOf x = mkAppTy _tc_RestrictionTc [ ]

instance Term Restrictions where
    explode (x::Restrictions) = TermRep (toDyn x, f x, g x) where
	f (Sdf_list2 aa) = [explode aa]
	g (Sdf_list2 _) xs = case TermRep.fArgs xs of [aa] -> toDyn ((Sdf_list2 (TermRep.fDyn aa))::Restrictions) ; _ -> error "Term explosion error."

_tc_RestrictionsTc = mkTyCon "Restrictions"
instance Typeable Restrictions where
    typeOf x = mkAppTy _tc_RestrictionsTc [ ]

instance Term Attribute where
    explode (x::Attribute) = TermRep (toDyn x, f x, g x) where
	f Sdf_reject = []
	f Sdf_prefer = []
	f Sdf_avoid = []
	f (Sdf_cons1 aa) = [explode aa]
	f Sdf_constructor = []
	f Sdf_memo = []
	f Sdf_traverse = []
	f Sdf_bracket = []
	f (Sdf_atr ab) = [explode ab]
	f (Sdf_id ac) = [explode ac]
	g Sdf_reject xs = case TermRep.fArgs xs of [] -> toDyn ((Sdf_reject)::Attribute) ; _ -> error "Term explosion error."
	g Sdf_prefer xs = case TermRep.fArgs xs of [] -> toDyn ((Sdf_prefer)::Attribute) ; _ -> error "Term explosion error."
	g Sdf_avoid xs = case TermRep.fArgs xs of [] -> toDyn ((Sdf_avoid)::Attribute) ; _ -> error "Term explosion error."
	g (Sdf_cons1 _) xs = case TermRep.fArgs xs of [aa] -> toDyn ((Sdf_cons1 (TermRep.fDyn aa))::Attribute) ; _ -> error "Term explosion error."
	g Sdf_constructor xs = case TermRep.fArgs xs of [] -> toDyn ((Sdf_constructor)::Attribute) ; _ -> error "Term explosion error."
	g Sdf_memo xs = case TermRep.fArgs xs of [] -> toDyn ((Sdf_memo)::Attribute) ; _ -> error "Term explosion error."
	g Sdf_traverse xs = case TermRep.fArgs xs of [] -> toDyn ((Sdf_traverse)::Attribute) ; _ -> error "Term explosion error."
	g Sdf_bracket xs = case TermRep.fArgs xs of [] -> toDyn ((Sdf_bracket)::Attribute) ; _ -> error "Term explosion error."
	g (Sdf_atr _) xs = case TermRep.fArgs xs of [ab] -> toDyn ((Sdf_atr (TermRep.fDyn ab))::Attribute) ; _ -> error "Term explosion error."
	g (Sdf_id _) xs = case TermRep.fArgs xs of [ac] -> toDyn ((Sdf_id (TermRep.fDyn ac))::Attribute) ; _ -> error "Term explosion error."

_tc_AttributeTc = mkTyCon "Attribute"
instance Typeable Attribute where
    typeOf x = mkAppTy _tc_AttributeTc [ ]

instance Term OptExp where
    explode (x::OptExp) = TermRep (toDyn x, f x, g x) where
	f (Sdf_present aa) = [explode aa]
	f Sdf_absent = []
	g (Sdf_present _) xs = case TermRep.fArgs xs of [aa] -> toDyn ((Sdf_present (TermRep.fDyn aa))::OptExp) ; _ -> error "Term explosion error."
	g Sdf_absent xs = case TermRep.fArgs xs of [] -> toDyn ((Sdf_absent)::OptExp) ; _ -> error "Term explosion error."

_tc_OptExpTc = mkTyCon "OptExp"
instance Typeable OptExp where
    typeOf x = mkAppTy _tc_OptExpTc [ ]

instance Term RealCon where
    explode (x::RealCon) = TermRep (toDyn x, f x, g x) where
	f (Sdf_real_con aa ab ac) = [explode aa,explode ab,explode ac]
	g (Sdf_real_con _ _ _) xs = case TermRep.fArgs xs of [aa,ab,ac] -> toDyn ((Sdf_real_con (TermRep.fDyn aa) (TermRep.fDyn ab) (TermRep.fDyn ac))::RealCon) ; _ -> error "Term explosion error."

_tc_RealConTc = mkTyCon "RealCon"
instance Typeable RealCon where
    typeOf x = mkAppTy _tc_RealConTc [ ]

instance Term AFun where
    explode (x::AFun) = TermRep (toDyn x, f x, g x) where
	f (Sdf_Literal aa) = [explode aa]
	g (Sdf_Literal _) xs = case TermRep.fArgs xs of [aa] -> toDyn ((Sdf_Literal (TermRep.fDyn aa))::AFun) ; _ -> error "Term explosion error."

_tc_AFunTc = mkTyCon "AFun"
instance Typeable AFun where
    typeOf x = mkAppTy _tc_AFunTc [ ]

instance Term A_Term where
    explode (x::A_Term) = TermRep (toDyn x, f x, g x) where
	f (Sdf_fun aa) = [explode aa]
	g (Sdf_fun _) xs = case TermRep.fArgs xs of [aa] -> toDyn ((Sdf_fun (TermRep.fDyn aa))::A_Term) ; _ -> error "Term explosion error."

_tc_A_TermTc = mkTyCon "A_Term"
instance Typeable A_Term where
    typeOf x = mkAppTy _tc_A_TermTc [ ]

instance Term Symbol where
    explode (x::Symbol) = TermRep (toDyn x, f x, g x) where
	f (Sdf_label aa ab) = [explode aa,explode ab]
	f (Sdf_lit ac) = [explode ac]
	f (Sdf_sort ad) = [explode ad]
	f (Sdf_char_class1 ae) = [explode ae]
	f Sdf_empty1 = []
	f (Sdf_seq1 af ag) = [explode af,explode ag]
	f (Sdf_opt ah) = [explode ah]
	f (Sdf_iter ai) = [explode ai]
	f (Sdf_iter_star aj) = [explode aj]
	f (Sdf_iter_sep ak al) = [explode ak,explode al]
	f (Sdf_iter_star_sep am an) = [explode am,explode an]
	f (Sdf_iter_n ao ap) = [explode ao,explode ap]
	f (Sdf_iter_sep_n aq ar as) = [explode aq,explode ar,explode as]
	f (Sdf_set at) = [explode at]
	f (Sdf_pair au av) = [explode au,explode av]
	f (Sdf_func aw ax) = [explode aw,explode ax]
	f (Sdf_alt1 ay az) = [explode ay,explode az]
	f (Sdf_perm aA) = [explode aA]
	f (Sdf_cf aB) = [explode aB]
	f (Sdf_lex aC) = [explode aC]
	f (Sdf_varsym aD) = [explode aD]
	f Sdf_layout = []
	f Sdf_start = []
	f Sdf_file_start = []
	g (Sdf_label _ _) xs = case TermRep.fArgs xs of [aa,ab] -> toDyn ((Sdf_label (TermRep.fDyn aa) (TermRep.fDyn ab))::Symbol) ; _ -> error "Term explosion error."
	g (Sdf_lit _) xs = case TermRep.fArgs xs of [ac] -> toDyn ((Sdf_lit (TermRep.fDyn ac))::Symbol) ; _ -> error "Term explosion error."
	g (Sdf_sort _) xs = case TermRep.fArgs xs of [ad] -> toDyn ((Sdf_sort (TermRep.fDyn ad))::Symbol) ; _ -> error "Term explosion error."
	g (Sdf_char_class1 _) xs = case TermRep.fArgs xs of [ae] -> toDyn ((Sdf_char_class1 (TermRep.fDyn ae))::Symbol) ; _ -> error "Term explosion error."
	g Sdf_empty1 xs = case TermRep.fArgs xs of [] -> toDyn ((Sdf_empty1)::Symbol) ; _ -> error "Term explosion error."
	g (Sdf_seq1 _ _) xs = case TermRep.fArgs xs of [af,ag] -> toDyn ((Sdf_seq1 (TermRep.fDyn af) (TermRep.fDyn ag))::Symbol) ; _ -> error "Term explosion error."
	g (Sdf_opt _) xs = case TermRep.fArgs xs of [ah] -> toDyn ((Sdf_opt (TermRep.fDyn ah))::Symbol) ; _ -> error "Term explosion error."
	g (Sdf_iter _) xs = case TermRep.fArgs xs of [ai] -> toDyn ((Sdf_iter (TermRep.fDyn ai))::Symbol) ; _ -> error "Term explosion error."
	g (Sdf_iter_star _) xs = case TermRep.fArgs xs of [aj] -> toDyn ((Sdf_iter_star (TermRep.fDyn aj))::Symbol) ; _ -> error "Term explosion error."
	g (Sdf_iter_sep _ _) xs = case TermRep.fArgs xs of [ak,al] -> toDyn ((Sdf_iter_sep (TermRep.fDyn ak) (TermRep.fDyn al))::Symbol) ; _ -> error "Term explosion error."
	g (Sdf_iter_star_sep _ _) xs = case TermRep.fArgs xs of [am,an] -> toDyn ((Sdf_iter_star_sep (TermRep.fDyn am) (TermRep.fDyn an))::Symbol) ; _ -> error "Term explosion error."
	g (Sdf_iter_n _ _) xs = case TermRep.fArgs xs of [ao,ap] -> toDyn ((Sdf_iter_n (TermRep.fDyn ao) (TermRep.fDyn ap))::Symbol) ; _ -> error "Term explosion error."
	g (Sdf_iter_sep_n _ _ _) xs = case TermRep.fArgs xs of [aq,ar,as] -> toDyn ((Sdf_iter_sep_n (TermRep.fDyn aq) (TermRep.fDyn ar) (TermRep.fDyn as))::Symbol) ; _ -> error "Term explosion error."
	g (Sdf_set _) xs = case TermRep.fArgs xs of [at] -> toDyn ((Sdf_set (TermRep.fDyn at))::Symbol) ; _ -> error "Term explosion error."
	g (Sdf_pair _ _) xs = case TermRep.fArgs xs of [au,av] -> toDyn ((Sdf_pair (TermRep.fDyn au) (TermRep.fDyn av))::Symbol) ; _ -> error "Term explosion error."
	g (Sdf_func _ _) xs = case TermRep.fArgs xs of [aw,ax] -> toDyn ((Sdf_func (TermRep.fDyn aw) (TermRep.fDyn ax))::Symbol) ; _ -> error "Term explosion error."
	g (Sdf_alt1 _ _) xs = case TermRep.fArgs xs of [ay,az] -> toDyn ((Sdf_alt1 (TermRep.fDyn ay) (TermRep.fDyn az))::Symbol) ; _ -> error "Term explosion error."
	g (Sdf_perm _) xs = case TermRep.fArgs xs of [aA] -> toDyn ((Sdf_perm (TermRep.fDyn aA))::Symbol) ; _ -> error "Term explosion error."
	g (Sdf_cf _) xs = case TermRep.fArgs xs of [aB] -> toDyn ((Sdf_cf (TermRep.fDyn aB))::Symbol) ; _ -> error "Term explosion error."
	g (Sdf_lex _) xs = case TermRep.fArgs xs of [aC] -> toDyn ((Sdf_lex (TermRep.fDyn aC))::Symbol) ; _ -> error "Term explosion error."
	g (Sdf_varsym _) xs = case TermRep.fArgs xs of [aD] -> toDyn ((Sdf_varsym (TermRep.fDyn aD))::Symbol) ; _ -> error "Term explosion error."
	g Sdf_layout xs = case TermRep.fArgs xs of [] -> toDyn ((Sdf_layout)::Symbol) ; _ -> error "Term explosion error."
	g Sdf_start xs = case TermRep.fArgs xs of [] -> toDyn ((Sdf_start)::Symbol) ; _ -> error "Term explosion error."
	g Sdf_file_start xs = case TermRep.fArgs xs of [] -> toDyn ((Sdf_file_start)::Symbol) ; _ -> error "Term explosion error."

_tc_SymbolTc = mkTyCon "Symbol"
instance Typeable Symbol where
    typeOf x = mkAppTy _tc_SymbolTc [ ]

instance Term Literal where
    explode (x::Literal) = TermRep (toDyn x, f x, g x) where
	f (Sdf_quoted aa) = [explode aa]
	f (Sdf_uqlit ab) = [explode ab]
	g (Sdf_quoted _) xs = case TermRep.fArgs xs of [aa] -> toDyn ((Sdf_quoted (TermRep.fDyn aa))::Literal) ; _ -> error "Term explosion error."
	g (Sdf_uqlit _) xs = case TermRep.fArgs xs of [ab] -> toDyn ((Sdf_uqlit (TermRep.fDyn ab))::Literal) ; _ -> error "Term explosion error."

_tc_LiteralTc = mkTyCon "Literal"
instance Typeable Literal where
    typeOf x = mkAppTy _tc_LiteralTc [ ]

instance Term Production where
    explode (x::Production) = TermRep (toDyn x, f x, g x) where
	f (Sdf_prod_fun aa ab ac ad) = [explode aa,explode ab,explode ac,explode ad]
	f (Sdf_prod ae af ag) = [explode ae,explode af,explode ag]
	g (Sdf_prod_fun _ _ _ _) xs = case TermRep.fArgs xs of [aa,ab,ac,ad] -> toDyn ((Sdf_prod_fun (TermRep.fDyn aa) (TermRep.fDyn ab) (TermRep.fDyn ac) (TermRep.fDyn ad))::Production) ; _ -> error "Term explosion error."
	g (Sdf_prod _ _ _) xs = case TermRep.fArgs xs of [ae,af,ag] -> toDyn ((Sdf_prod (TermRep.fDyn ae) (TermRep.fDyn af) (TermRep.fDyn ag))::Production) ; _ -> error "Term explosion error."

_tc_ProductionTc = mkTyCon "Production"
instance Typeable Production where
    typeOf x = mkAppTy _tc_ProductionTc [ ]

instance Term Character where
    explode (x::Character) = TermRep (toDyn x, f x, g x) where
	f (Sdf_numeric aa) = [explode aa]
	f (Sdf_short ab) = [explode ab]
	f Sdf_top = []
	f Sdf_eof = []
	f Sdf_bot = []
	f Sdf_label_start = []
	g (Sdf_numeric _) xs = case TermRep.fArgs xs of [aa] -> toDyn ((Sdf_numeric (TermRep.fDyn aa))::Character) ; _ -> error "Term explosion error."
	g (Sdf_short _) xs = case TermRep.fArgs xs of [ab] -> toDyn ((Sdf_short (TermRep.fDyn ab))::Character) ; _ -> error "Term explosion error."
	g Sdf_top xs = case TermRep.fArgs xs of [] -> toDyn ((Sdf_top)::Character) ; _ -> error "Term explosion error."
	g Sdf_eof xs = case TermRep.fArgs xs of [] -> toDyn ((Sdf_eof)::Character) ; _ -> error "Term explosion error."
	g Sdf_bot xs = case TermRep.fArgs xs of [] -> toDyn ((Sdf_bot)::Character) ; _ -> error "Term explosion error."
	g Sdf_label_start xs = case TermRep.fArgs xs of [] -> toDyn ((Sdf_label_start)::Character) ; _ -> error "Term explosion error."

_tc_CharacterTc = mkTyCon "Character"
instance Typeable Character where
    typeOf x = mkAppTy _tc_CharacterTc [ ]

instance Term CharRange where
    explode (x::CharRange) = TermRep (toDyn x, f x, g x) where
	f (Sdf_Character aa) = [explode aa]
	f (Sdf_range ab ac) = [explode ab,explode ac]
	g (Sdf_Character _) xs = case TermRep.fArgs xs of [aa] -> toDyn ((Sdf_Character (TermRep.fDyn aa))::CharRange) ; _ -> error "Term explosion error."
	g (Sdf_range _ _) xs = case TermRep.fArgs xs of [ab,ac] -> toDyn ((Sdf_range (TermRep.fDyn ab) (TermRep.fDyn ac))::CharRange) ; _ -> error "Term explosion error."

_tc_CharRangeTc = mkTyCon "CharRange"
instance Typeable CharRange where
    typeOf x = mkAppTy _tc_CharRangeTc [ ]

instance Term CharRanges where
    explode (x::CharRanges) = TermRep (toDyn x, f x, g x) where
	f (Sdf_CharRange aa) = [explode aa]
	f (Sdf_conc ab ac) = [explode ab,explode ac]
	g (Sdf_CharRange _) xs = case TermRep.fArgs xs of [aa] -> toDyn ((Sdf_CharRange (TermRep.fDyn aa))::CharRanges) ; _ -> error "Term explosion error."
	g (Sdf_conc _ _) xs = case TermRep.fArgs xs of [ab,ac] -> toDyn ((Sdf_conc (TermRep.fDyn ab) (TermRep.fDyn ac))::CharRanges) ; _ -> error "Term explosion error."

_tc_CharRangesTc = mkTyCon "CharRanges"
instance Typeable CharRanges where
    typeOf x = mkAppTy _tc_CharRangesTc [ ]

instance Term OptCharRanges where
    explode (x::OptCharRanges) = TermRep (toDyn x, f x, g x) where
	f Sdf_absent1 = []
	f (Sdf_present1 aa) = [explode aa]
	g Sdf_absent1 xs = case TermRep.fArgs xs of [] -> toDyn ((Sdf_absent1)::OptCharRanges) ; _ -> error "Term explosion error."
	g (Sdf_present1 _) xs = case TermRep.fArgs xs of [aa] -> toDyn ((Sdf_present1 (TermRep.fDyn aa))::OptCharRanges) ; _ -> error "Term explosion error."

_tc_OptCharRangesTc = mkTyCon "OptCharRanges"
instance Typeable OptCharRanges where
    typeOf x = mkAppTy _tc_OptCharRangesTc [ ]

instance Term CharClass where
    explode (x::CharClass) = TermRep (toDyn x, f x, g x) where
	f (Sdf_simple_charclass aa) = [explode aa]
	f (Sdf_comp ab) = [explode ab]
	f (Sdf_diff ac ad) = [explode ac,explode ad]
	f (Sdf_isect ae af) = [explode ae,explode af]
	f (Sdf_union ag ah) = [explode ag,explode ah]
	g (Sdf_simple_charclass _) xs = case TermRep.fArgs xs of [aa] -> toDyn ((Sdf_simple_charclass (TermRep.fDyn aa))::CharClass) ; _ -> error "Term explosion error."
	g (Sdf_comp _) xs = case TermRep.fArgs xs of [ab] -> toDyn ((Sdf_comp (TermRep.fDyn ab))::CharClass) ; _ -> error "Term explosion error."
	g (Sdf_diff _ _) xs = case TermRep.fArgs xs of [ac,ad] -> toDyn ((Sdf_diff (TermRep.fDyn ac) (TermRep.fDyn ad))::CharClass) ; _ -> error "Term explosion error."
	g (Sdf_isect _ _) xs = case TermRep.fArgs xs of [ae,af] -> toDyn ((Sdf_isect (TermRep.fDyn ae) (TermRep.fDyn af))::CharClass) ; _ -> error "Term explosion error."
	g (Sdf_union _ _) xs = case TermRep.fArgs xs of [ag,ah] -> toDyn ((Sdf_union (TermRep.fDyn ag) (TermRep.fDyn ah))::CharClass) ; _ -> error "Term explosion error."

_tc_CharClassTc = mkTyCon "CharClass"
instance Typeable CharClass where
    typeOf x = mkAppTy _tc_CharClassTc [ ]

instance Term Associativity where
    explode (x::Associativity) = TermRep (toDyn x, f x, g x) where
	f Sdf_left = []
	f Sdf_right = []
	f Sdf_non_assoc = []
	f Sdf_assoc = []
	g Sdf_left xs = case TermRep.fArgs xs of [] -> toDyn ((Sdf_left)::Associativity) ; _ -> error "Term explosion error."
	g Sdf_right xs = case TermRep.fArgs xs of [] -> toDyn ((Sdf_right)::Associativity) ; _ -> error "Term explosion error."
	g Sdf_non_assoc xs = case TermRep.fArgs xs of [] -> toDyn ((Sdf_non_assoc)::Associativity) ; _ -> error "Term explosion error."
	g Sdf_assoc xs = case TermRep.fArgs xs of [] -> toDyn ((Sdf_assoc)::Associativity) ; _ -> error "Term explosion error."

_tc_AssociativityTc = mkTyCon "Associativity"
instance Typeable Associativity where
    typeOf x = mkAppTy _tc_AssociativityTc [ ]

instance Term Group where
    explode (x::Group) = TermRep (toDyn x, f x, g x) where
	f (Sdf_simple_group aa) = [explode aa]
	f (Sdf_prods_group ab) = [explode ab]
	f (Sdf_assoc_group ac ad) = [explode ac,explode ad]
	g (Sdf_simple_group _) xs = case TermRep.fArgs xs of [aa] -> toDyn ((Sdf_simple_group (TermRep.fDyn aa))::Group) ; _ -> error "Term explosion error."
	g (Sdf_prods_group _) xs = case TermRep.fArgs xs of [ab] -> toDyn ((Sdf_prods_group (TermRep.fDyn ab))::Group) ; _ -> error "Term explosion error."
	g (Sdf_assoc_group _ _) xs = case TermRep.fArgs xs of [ac,ad] -> toDyn ((Sdf_assoc_group (TermRep.fDyn ac) (TermRep.fDyn ad))::Group) ; _ -> error "Term explosion error."

_tc_GroupTc = mkTyCon "Group"
instance Typeable Group where
    typeOf x = mkAppTy _tc_GroupTc [ ]

instance Term Priority where
    explode (x::Priority) = TermRep (toDyn x, f x, g x) where
	f (Sdf_chain aa) = [explode aa]
	f (Sdf_assoc1 ab ac ad) = [explode ab,explode ac,explode ad]
	g (Sdf_chain _) xs = case TermRep.fArgs xs of [aa] -> toDyn ((Sdf_chain (TermRep.fDyn aa))::Priority) ; _ -> error "Term explosion error."
	g (Sdf_assoc1 _ _ _) xs = case TermRep.fArgs xs of [ab,ac,ad] -> toDyn ((Sdf_assoc1 (TermRep.fDyn ab) (TermRep.fDyn ac) (TermRep.fDyn ad))::Priority) ; _ -> error "Term explosion error."

_tc_PriorityTc = mkTyCon "Priority"
instance Typeable Priority where
    typeOf x = mkAppTy _tc_PriorityTc [ ]

instance Term Priorities where
    explode (x::Priorities) = TermRep (toDyn x, f x, g x) where
	f (Sdf_comma aa) = [explode aa]
	g (Sdf_comma _) xs = case TermRep.fArgs xs of [aa] -> toDyn ((Sdf_comma (TermRep.fDyn aa))::Priorities) ; _ -> error "Term explosion error."

_tc_PrioritiesTc = mkTyCon "Priorities"
instance Typeable Priorities where
    typeOf x = mkAppTy _tc_PrioritiesTc [ ]

instance Term IntCon where
    explode (x::IntCon) = TermRep (toDyn x, f x, g x) where
	f (Sdf_natural aa) = [explode aa]
	f (Sdf_positive ab) = [explode ab]
	f (Sdf_negative ac) = [explode ac]
	g (Sdf_natural _) xs = case TermRep.fArgs xs of [aa] -> toDyn ((Sdf_natural (TermRep.fDyn aa))::IntCon) ; _ -> error "Term explosion error."
	g (Sdf_positive _) xs = case TermRep.fArgs xs of [ab] -> toDyn ((Sdf_positive (TermRep.fDyn ab))::IntCon) ; _ -> error "Term explosion error."
	g (Sdf_negative _) xs = case TermRep.fArgs xs of [ac] -> toDyn ((Sdf_negative (TermRep.fDyn ac))::IntCon) ; _ -> error "Term explosion error."

_tc_IntConTc = mkTyCon "IntCon"
instance Typeable IntCon where
    typeOf x = mkAppTy _tc_IntConTc [ ]

instance Term Renamings where
    explode (x::Renamings) = TermRep (toDyn x, f x, g x) where
	f (Sdf_renamings aa) = [explode aa]
	g (Sdf_renamings _) xs = case TermRep.fArgs xs of [aa] -> toDyn ((Sdf_renamings (TermRep.fDyn aa))::Renamings) ; _ -> error "Term explosion error."

_tc_RenamingsTc = mkTyCon "Renamings"
instance Typeable Renamings where
    typeOf x = mkAppTy _tc_RenamingsTc [ ]

instance Term Renaming where
    explode (x::Renaming) = TermRep (toDyn x, f x, g x) where
	f (Sdf_symbol aa ab) = [explode aa,explode ab]
	f (Sdf_production ac ad) = [explode ac,explode ad]
	g (Sdf_symbol _ _) xs = case TermRep.fArgs xs of [aa,ab] -> toDyn ((Sdf_symbol (TermRep.fDyn aa) (TermRep.fDyn ab))::Renaming) ; _ -> error "Term explosion error."
	g (Sdf_production _ _) xs = case TermRep.fArgs xs of [ac,ad] -> toDyn ((Sdf_production (TermRep.fDyn ac) (TermRep.fDyn ad))::Renaming) ; _ -> error "Term explosion error."

_tc_RenamingTc = mkTyCon "Renaming"
instance Typeable Renaming where
    typeOf x = mkAppTy _tc_RenamingTc [ ]

instance Term Definition where
    explode (x::Definition) = TermRep (toDyn x, f x, g x) where
	f (Sdf_list4 aa) = [explode aa]
	g (Sdf_list4 _) xs = case TermRep.fArgs xs of [aa] -> toDyn ((Sdf_list4 (TermRep.fDyn aa))::Definition) ; _ -> error "Term explosion error."

_tc_DefinitionTc = mkTyCon "Definition"
instance Typeable Definition where
    typeOf x = mkAppTy _tc_DefinitionTc [ ]

instance Term Module where
    explode (x::Module) = TermRep (toDyn x, f x, g x) where
	f (Sdf_module_ aa ab ac) = [explode aa,explode ab,explode ac]
	g (Sdf_module_ _ _ _) xs = case TermRep.fArgs xs of [aa,ab,ac] -> toDyn ((Sdf_module_ (TermRep.fDyn aa) (TermRep.fDyn ab) (TermRep.fDyn ac))::Module) ; _ -> error "Term explosion error."

_tc_ModuleTc = mkTyCon "Module"
instance Typeable Module where
    typeOf x = mkAppTy _tc_ModuleTc [ ]

instance Term Section where
    explode (x::Section) = TermRep (toDyn x, f x, g x) where
	f (Sdf_exports_ aa) = [explode aa]
	f (Sdf_hiddens ab) = [explode ab]
	g (Sdf_exports_ _) xs = case TermRep.fArgs xs of [aa] -> toDyn ((Sdf_exports_ (TermRep.fDyn aa))::Section) ; _ -> error "Term explosion error."
	g (Sdf_hiddens _) xs = case TermRep.fArgs xs of [ab] -> toDyn ((Sdf_hiddens (TermRep.fDyn ab))::Section) ; _ -> error "Term explosion error."

_tc_SectionTc = mkTyCon "Section"
instance Typeable Section where
    typeOf x = mkAppTy _tc_SectionTc [ ]

instance Term Sections where
    explode (x::Sections) = TermRep (toDyn x, f x, g x) where
	f (Sdf_list5 aa) = [explode aa]
	g (Sdf_list5 _) xs = case TermRep.fArgs xs of [aa] -> toDyn ((Sdf_list5 (TermRep.fDyn aa))::Sections) ; _ -> error "Term explosion error."

_tc_SectionsTc = mkTyCon "Sections"
instance Typeable Sections where
    typeOf x = mkAppTy _tc_SectionsTc [ ]

instance Term ModuleName where
    explode (x::ModuleName) = TermRep (toDyn x, f x, g x) where
	f (Sdf_unparameterized aa) = [explode aa]
	f (Sdf_parameterized ab ac) = [explode ab,explode ac]
	g (Sdf_unparameterized _) xs = case TermRep.fArgs xs of [aa] -> toDyn ((Sdf_unparameterized (TermRep.fDyn aa))::ModuleName) ; _ -> error "Term explosion error."
	g (Sdf_parameterized _ _) xs = case TermRep.fArgs xs of [ab,ac] -> toDyn ((Sdf_parameterized (TermRep.fDyn ab) (TermRep.fDyn ac))::ModuleName) ; _ -> error "Term explosion error."

_tc_ModuleNameTc = mkTyCon "ModuleName"
instance Typeable ModuleName where
    typeOf x = mkAppTy _tc_ModuleNameTc [ ]

instance Term ImpSection where
    explode (x::ImpSection) = TermRep (toDyn x, f x, g x) where
	f (Sdf_imports_ aa) = [explode aa]
	g (Sdf_imports_ _) xs = case TermRep.fArgs xs of [aa] -> toDyn ((Sdf_imports_ (TermRep.fDyn aa))::ImpSection) ; _ -> error "Term explosion error."

_tc_ImpSectionTc = mkTyCon "ImpSection"
instance Typeable ImpSection where
    typeOf x = mkAppTy _tc_ImpSectionTc [ ]

instance Term Imports where
    explode (x::Imports) = TermRep (toDyn x, f x, g x) where
	f (Sdf_list6 aa) = [explode aa]
	g (Sdf_list6 _) xs = case TermRep.fArgs xs of [aa] -> toDyn ((Sdf_list6 (TermRep.fDyn aa))::Imports) ; _ -> error "Term explosion error."

_tc_ImportsTc = mkTyCon "Imports"
instance Typeable Imports where
    typeOf x = mkAppTy _tc_ImportsTc [ ]

instance Term Import where
    explode (x::Import) = TermRep (toDyn x, f x, g x) where
	f (Sdf_module1 aa) = [explode aa]
	f (Sdf_renamed_module ab ac) = [explode ab,explode ac]
	g (Sdf_module1 _) xs = case TermRep.fArgs xs of [aa] -> toDyn ((Sdf_module1 (TermRep.fDyn aa))::Import) ; _ -> error "Term explosion error."
	g (Sdf_renamed_module _ _) xs = case TermRep.fArgs xs of [ab,ac] -> toDyn ((Sdf_renamed_module (TermRep.fDyn ab) (TermRep.fDyn ac))::Import) ; _ -> error "Term explosion error."

_tc_ImportTc = mkTyCon "Import"
instance Typeable Import where
    typeOf x = mkAppTy _tc_ImportTc [ ]

instance Term Symbols where
    explode (x::Symbols) = TermRep (toDyn x, f x, g x) where
	f (Sdf_list7 aa) = [explode aa]
	g (Sdf_list7 _) xs = case TermRep.fArgs xs of [aa] -> toDyn ((Sdf_list7 (TermRep.fDyn aa))::Symbols) ; _ -> error "Term explosion error."

_tc_SymbolsTc = mkTyCon "Symbols"
instance Typeable Symbols where
    typeOf x = mkAppTy _tc_SymbolsTc [ ]

instance Term Attributes where
    explode (x::Attributes) = TermRep (toDyn x, f x, g x) where
	f (Sdf_attrs aa) = [explode aa]
	f Sdf_no_attrs = []
	g (Sdf_attrs _) xs = case TermRep.fArgs xs of [aa] -> toDyn ((Sdf_attrs (TermRep.fDyn aa))::Attributes) ; _ -> error "Term explosion error."
	g Sdf_no_attrs xs = case TermRep.fArgs xs of [] -> toDyn ((Sdf_no_attrs)::Attributes) ; _ -> error "Term explosion error."

_tc_AttributesTc = mkTyCon "Attributes"
instance Typeable Attributes where
    typeOf x = mkAppTy _tc_AttributesTc [ ]

instance Term Productions where
    explode (x::Productions) = TermRep (toDyn x, f x, g x) where
	f (Sdf_list8 aa) = [explode aa]
	g (Sdf_list8 _) xs = case TermRep.fArgs xs of [aa] -> toDyn ((Sdf_list8 (TermRep.fDyn aa))::Productions) ; _ -> error "Term explosion error."

_tc_ProductionsTc = mkTyCon "Productions"
instance Typeable Productions where
    typeOf x = mkAppTy _tc_ProductionsTc [ ]

instance Term SDF where
    explode (x::SDF) = TermRep (toDyn x, f x, g x) where
	f (Sdf_definition aa) = [explode aa]
	g (Sdf_definition _) xs = case TermRep.fArgs xs of [aa] -> toDyn ((Sdf_definition (TermRep.fDyn aa))::SDF) ; _ -> error "Term explosion error."

_tc_SDFTc = mkTyCon "SDF"
instance Typeable SDF where
    typeOf x = mkAppTy _tc_SDFTc [ ]

--  Imported from other files :-
