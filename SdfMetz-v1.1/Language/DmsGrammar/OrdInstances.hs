module Language.DmsGrammar.OrdInstances where

import Language.DmsGrammar.Syntax
import Language.DmsGrammar.EqInstances

{- Generated by DrIFT (Automatic class derivations for Haskell) -}
{-# LINE 1 "Syntax.hs" #-}
{-* Generated by DrIFT : Look, but Don't Touch. *-}
instance Ord DmsSyntax where
    compare (DmsSyntax aa) (DmsSyntax aa') = compare aa aa'

instance Ord DmsRule where
    compare (Other aa ab) (Other aa' ab') =
	    foldl (\x y -> if x == EQ then compare y EQ else y) EQ
	    [compare aa aa',compare ab ab']
    compare (Other aa ab) (Rule aa' ab' ac') = LT
    compare (Other aa ab) (Disambiguation aa') = LT
    compare (Rule aa ab ac) (Other aa' ab') = GT
    compare (Rule aa ab ac) (Rule aa' ab' ac') =
	    foldl (\x y -> if x == EQ then compare y EQ else y) EQ
	    [compare aa aa',compare ab ab',compare ac ac']
    compare (Rule aa ab ac) (Disambiguation aa') = LT
    compare (Disambiguation aa) (Other aa' ab') = GT
    compare (Disambiguation aa) (Rule aa' ab' ac') = GT
    compare (Disambiguation aa) (Disambiguation aa') = compare aa aa'

instance Ord DmsSymbol where
    compare (DmsNonTerminal aa) (DmsNonTerminal aa') = compare aa aa'
    compare (DmsNonTerminal aa) (DmsTerminal aa') = LT
    compare (DmsTerminal aa) (DmsNonTerminal aa') = GT
    compare (DmsTerminal aa) (DmsTerminal aa') = compare aa aa'

--  Imported from other files :-
