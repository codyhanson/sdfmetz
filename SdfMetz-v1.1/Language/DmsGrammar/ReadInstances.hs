module Language.DmsGrammar.ReadInstances where

import Language.DmsGrammar.Syntax

{- Generated by DrIFT (Automatic class derivations for Haskell) -}
{-# LINE 1 "Syntax.hs" #-}
{-* Generated by DrIFT : Look, but Don't Touch. *-}
instance Read DmsSyntax where
    readsPrec d input =
	      readParen (d > 9)
	      (\ inp ->
	       [((DmsSyntax aa) , rest) | ("DmsSyntax" , inp) <- lex inp ,
		(aa , rest) <- readsPrec 10 inp])
	      input

instance Read DmsRule where
    readsPrec d input =
	      readParen (d > 9)
	      (\ inp ->
	       [((Other aa ab) , rest) | ("Other" , inp) <- lex inp ,
		(aa , inp) <- readsPrec 10 inp , (ab , rest) <- readsPrec 10 inp])
	      input
	      ++
	      readParen (d > 9)
	      (\ inp ->
	       [((Rule aa ab ac) , rest) | ("Rule" , inp) <- lex inp ,
		(aa , inp) <- readsPrec 10 inp , (ab , inp) <- readsPrec 10 inp ,
		(ac , rest) <- readsPrec 10 inp])
	      input
	      ++
	      readParen (d > 9)
	      (\ inp ->
	       [((Disambiguation aa) , rest) | ("Disambiguation" , inp) <- lex inp
		, (aa , rest) <- readsPrec 10 inp])
	      input

instance Read DmsSymbol where
    readsPrec d input =
	      readParen (d > 9)
	      (\ inp ->
	       [((DmsNonTerminal aa) , rest) | ("DmsNonTerminal" , inp) <- lex inp
		, (aa , rest) <- readsPrec 10 inp])
	      input
	      ++
	      readParen (d > 9)
	      (\ inp ->
	       [((DmsTerminal aa) , rest) | ("DmsTerminal" , inp) <- lex inp ,
		(aa , rest) <- readsPrec 10 inp])
	      input

--  Imported from other files :-
