module Language.DmsGrammar.ShowInstances where

import Language.DmsGrammar.Syntax

{- Generated by DrIFT (Automatic class derivations for Haskell) -}
{-# LINE 1 "Syntax.hs" #-}
{-* Generated by DrIFT : Look, but Don't Touch. *-}
instance Show DmsSyntax where
    showsPrec d (DmsSyntax aa) = showParen (d >= 10)
	      (showString "DmsSyntax" . showChar ' ' . showsPrec 10 aa)

instance Show DmsRule where
    showsPrec d (Other aa ab) = showParen (d >= 10)
	      (showString "Other" . showChar ' ' . showsPrec 10 aa
	       . showChar ' ' . showsPrec 10 ab)
    showsPrec d (Rule aa ab ac) = showParen (d >= 10)
	      (showString "Rule" . showChar ' ' . showsPrec 10 aa
	       . showChar ' ' . showsPrec 10 ab . showChar ' ' . showsPrec 10 ac)
    showsPrec d (Disambiguation aa) = showParen (d >= 10)
	      (showString "Disambiguation" . showChar ' ' . showsPrec 10 aa)

instance Show DmsSymbol where
    showsPrec d (DmsNonTerminal aa) = showParen (d >= 10)
	      (showString "DmsNonTerminal" . showChar ' ' . showsPrec 10 aa)
    showsPrec d (DmsTerminal aa) = showParen (d >= 10)
	      (showString "DmsTerminal" . showChar ' ' . showsPrec 10 aa)

--  Imported from other files :-
