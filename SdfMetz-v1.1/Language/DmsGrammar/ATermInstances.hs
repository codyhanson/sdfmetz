module Language.DmsGrammar.ATermInstances where

import Language.DmsGrammar.Syntax
import ATermLib

{- Generated by DrIFT (Automatic class derivations for Haskell) -}
{-# LINE 1 "Syntax.hs" #-}
{-* Generated by DrIFT : Look, but Don't Touch. *-}
instance ATermConvertible DmsSyntax where
    toATerm (DmsSyntax aa) = (AAppl "DmsSyntax" [ toATerm aa ])
    fromATerm (AAppl "DmsSyntax" [ aa ]) = let aa' = fromATerm aa in (DmsSyntax aa')
    fromATerm u = fromATermError "DmsSyntax" u

instance ATermConvertible DmsRule where
    toATerm (Other aa ab) = (AAppl "Other" [ toATerm aa,toATerm ab ])
    toATerm (Rule aa ab ac) = (AAppl "Rule" [ toATerm aa,toATerm ab,toATerm ac ])
    toATerm (Disambiguation aa) = (AAppl "Disambiguation" [ toATerm aa ])
    fromATerm (AAppl "Other" [ aa,ab ]) = let aa' = fromATerm aa
					      ab' = fromATerm ab in (Other aa' ab')
    fromATerm (AAppl "Rule" [ aa,ab,ac ]) = let aa' = fromATerm aa
						ab' = fromATerm ab
						ac' = fromATerm ac in (Rule aa' ab' ac')
    fromATerm (AAppl "Disambiguation" [ aa ]) = let aa' = fromATerm aa in (Disambiguation aa')
    fromATerm u = fromATermError "DmsRule" u

instance ATermConvertible DmsSymbol where
    toATerm (DmsNonTerminal aa) = (AAppl "DmsNonTerminal" [ toATerm aa ])
    toATerm (DmsTerminal aa) = (AAppl "DmsTerminal" [ toATerm aa ])
    fromATerm (AAppl "DmsNonTerminal" [ aa ]) = let aa' = fromATerm aa in (DmsNonTerminal aa')
    fromATerm (AAppl "DmsTerminal" [ aa ]) = let aa' = fromATerm aa in (DmsTerminal aa')
    fromATerm u = fromATermError "DmsSymbol" u

--  Imported from other files :-
