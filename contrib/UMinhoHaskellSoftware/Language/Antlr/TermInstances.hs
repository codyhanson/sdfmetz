module Language.Antlr.TermInstances where

import Language.Antlr.Syntax
import TermRep

{- Generated by DrIFT (Automatic class derivations for Haskell) -}
{-# LINE 1 "Syntax.hs" #-}
{-* Generated by DrIFT : Look, but Don't Touch. *-}
instance Term GrammarHeader where
    explode (x::GrammarHeader) = TermRep (toDyn x, f x, g x) where
	f (GrammarHeader aa ab) = [explode aa,explode ab]
	g (GrammarHeader _ _) xs = case TermRep.fArgs xs of [aa,ab] -> toDyn ((GrammarHeader (TermRep.fDyn aa) (TermRep.fDyn ab))::GrammarHeader) ; _ -> error "Term explosion error."

_tc_GrammarHeaderTc = mkTyCon "GrammarHeader"
instance Typeable GrammarHeader where
    typeOf x = mkTyConApp _tc_GrammarHeaderTc [ ]

instance Term Grammar where
    explode (x::Grammar) = TermRep (toDyn x, f x, g x) where
	f (Grammar aa ab ac) = [explode aa,explode ab,explode ac]
	g (Grammar _ _ _) xs = case TermRep.fArgs xs of [aa,ab,ac] -> toDyn ((Grammar (TermRep.fDyn aa) (TermRep.fDyn ab) (TermRep.fDyn ac))::Grammar) ; _ -> error "Term explosion error."

_tc_GrammarTc = mkTyCon "Grammar"
instance Typeable Grammar where
    typeOf x = mkTyConApp _tc_GrammarTc [ ]

instance Term ClassDef where
    explode (x::ClassDef) = TermRep (toDyn x, f x, g x) where
	f (ClassDef aa ab ac ad) = [explode aa,explode ab,explode ac,explode ad]
	g (ClassDef _ _ _ _) xs = case TermRep.fArgs xs of [aa,ab,ac,ad] -> toDyn ((ClassDef (TermRep.fDyn aa) (TermRep.fDyn ab) (TermRep.fDyn ac) (TermRep.fDyn ad))::ClassDef) ; _ -> error "Term explosion error."

_tc_ClassDefTc = mkTyCon "ClassDef"
instance Typeable ClassDef where
    typeOf x = mkTyConApp _tc_ClassDefTc [ ]

instance Term OptionAssignmentSemi where
    explode (x::OptionAssignmentSemi) = TermRep (toDyn x, f x, g x) where
	f (OptionAssignmentSemi aa ab) = [explode aa,explode ab]
	g (OptionAssignmentSemi _ _) xs = case TermRep.fArgs xs of [aa,ab] -> toDyn ((OptionAssignmentSemi (TermRep.fDyn aa) (TermRep.fDyn ab))::OptionAssignmentSemi) ; _ -> error "Term explosion error."

_tc_OptionAssignmentSemiTc = mkTyCon "OptionAssignmentSemi"
instance Typeable OptionAssignmentSemi where
    typeOf x = mkTyConApp _tc_OptionAssignmentSemiTc [ ]

instance Term OptionAssignment where
    explode (x::OptionAssignment) = TermRep (toDyn x, f x, g x) where
	f (OptionAssignment aa ab) = [explode aa,explode ab]
	g (OptionAssignment _ _) xs = case TermRep.fArgs xs of [aa,ab] -> toDyn ((OptionAssignment (TermRep.fDyn aa) (TermRep.fDyn ab))::OptionAssignment) ; _ -> error "Term explosion error."

_tc_OptionAssignmentTc = mkTyCon "OptionAssignment"
instance Typeable OptionAssignment where
    typeOf x = mkTyConApp _tc_OptionAssignmentTc [ ]

instance Term OptionsSpec where
    explode (x::OptionsSpec) = TermRep (toDyn x, f x, g x) where
	f (OptionsSpec aa) = [explode aa]
	g (OptionsSpec _) xs = case TermRep.fArgs xs of [aa] -> toDyn ((OptionsSpec (TermRep.fDyn aa))::OptionsSpec) ; _ -> error "Term explosion error."

_tc_OptionsSpecTc = mkTyCon "OptionsSpec"
instance Typeable OptionsSpec where
    typeOf x = mkTyConApp _tc_OptionsSpecTc [ ]

instance Term SingleOptionSpec where
    explode (x::SingleOptionSpec) = TermRep (toDyn x, f x, g x) where
	f (LexOption aa) = [explode aa]
	f (Option ab ac) = [explode ab,explode ac]
	g (LexOption _) xs = case TermRep.fArgs xs of [aa] -> toDyn ((LexOption (TermRep.fDyn aa))::SingleOptionSpec) ; _ -> error "Term explosion error."
	g (Option _ _) xs = case TermRep.fArgs xs of [ab,ac] -> toDyn ((Option (TermRep.fDyn ab) (TermRep.fDyn ac))::SingleOptionSpec) ; _ -> error "Term explosion error."

_tc_SingleOptionSpecTc = mkTyCon "SingleOptionSpec"
instance Typeable SingleOptionSpec where
    typeOf x = mkTyConApp _tc_SingleOptionSpecTc [ ]

instance Term LexerOptionsSpec where
    explode (x::LexerOptionsSpec) = TermRep (toDyn x, f x, g x) where
	f (LexerOptionsSpec aa) = [explode aa]
	g (LexerOptionsSpec _) xs = case TermRep.fArgs xs of [aa] -> toDyn ((LexerOptionsSpec (TermRep.fDyn aa))::LexerOptionsSpec) ; _ -> error "Term explosion error."

_tc_LexerOptionsSpecTc = mkTyCon "LexerOptionsSpec"
instance Typeable LexerOptionsSpec where
    typeOf x = mkTyConApp _tc_LexerOptionsSpecTc [ ]

instance Term OptionValue where
    explode (x::OptionValue) = TermRep (toDyn x, f x, g x) where
	f (IdValue aa) = [explode aa]
	f (StringValue ab) = [explode ab]
	f (CharValue ac) = [explode ac]
	f (IntValue ad) = [explode ad]
	g (IdValue _) xs = case TermRep.fArgs xs of [aa] -> toDyn ((IdValue (TermRep.fDyn aa))::OptionValue) ; _ -> error "Term explosion error."
	g (StringValue _) xs = case TermRep.fArgs xs of [ab] -> toDyn ((StringValue (TermRep.fDyn ab))::OptionValue) ; _ -> error "Term explosion error."
	g (CharValue _) xs = case TermRep.fArgs xs of [ac] -> toDyn ((CharValue (TermRep.fDyn ac))::OptionValue) ; _ -> error "Term explosion error."
	g (IntValue _) xs = case TermRep.fArgs xs of [ad] -> toDyn ((IntValue (TermRep.fDyn ad))::OptionValue) ; _ -> error "Term explosion error."

_tc_OptionValueTc = mkTyCon "OptionValue"
instance Typeable OptionValue where
    typeOf x = mkTyConApp _tc_OptionValueTc [ ]

instance Term CharSet where
    explode (x::CharSet) = TermRep (toDyn x, f x, g x) where
	f (CharSet aa) = [explode aa]
	g (CharSet _) xs = case TermRep.fArgs xs of [aa] -> toDyn ((CharSet (TermRep.fDyn aa))::CharSet) ; _ -> error "Term explosion error."

_tc_CharSetTc = mkTyCon "CharSet"
instance Typeable CharSet where
    typeOf x = mkTyConApp _tc_CharSetTc [ ]

instance Term SetBlockElement where
    explode (x::SetBlockElement) = TermRep (toDyn x, f x, g x) where
	f (SetBlockElement aa ab) = [explode aa,explode ab]
	g (SetBlockElement _ _) xs = case TermRep.fArgs xs of [aa,ab] -> toDyn ((SetBlockElement (TermRep.fDyn aa) (TermRep.fDyn ab))::SetBlockElement) ; _ -> error "Term explosion error."

_tc_SetBlockElementTc = mkTyCon "SetBlockElement"
instance Typeable SetBlockElement where
    typeOf x = mkTyConApp _tc_SetBlockElementTc [ ]

instance Term SingleTokenSpec where
    explode (x::SingleTokenSpec) = TermRep (toDyn x, f x, g x) where
	f (TokenRefSpec aa ab ac) = [explode aa,explode ab,explode ac]
	f (StringLitTokenSpec ad ae) = [explode ad,explode ae]
	g (TokenRefSpec _ _ _) xs = case TermRep.fArgs xs of [aa,ab,ac] -> toDyn ((TokenRefSpec (TermRep.fDyn aa) (TermRep.fDyn ab) (TermRep.fDyn ac))::SingleTokenSpec) ; _ -> error "Term explosion error."
	g (StringLitTokenSpec _ _) xs = case TermRep.fArgs xs of [ad,ae] -> toDyn ((StringLitTokenSpec (TermRep.fDyn ad) (TermRep.fDyn ae))::SingleTokenSpec) ; _ -> error "Term explosion error."

_tc_SingleTokenSpecTc = mkTyCon "SingleTokenSpec"
instance Typeable SingleTokenSpec where
    typeOf x = mkTyConApp _tc_SingleTokenSpecTc [ ]

instance Term TokensSpec where
    explode (x::TokensSpec) = TermRep (toDyn x, f x, g x) where
	f (TokensSpec aa) = [explode aa]
	g (TokensSpec _) xs = case TermRep.fArgs xs of [aa] -> toDyn ((TokensSpec (TermRep.fDyn aa))::TokensSpec) ; _ -> error "Term explosion error."

_tc_TokensSpecTc = mkTyCon "TokensSpec"
instance Typeable TokensSpec where
    typeOf x = mkTyConApp _tc_TokensSpecTc [ ]

instance Term TokensSpecOptions where
    explode (x::TokensSpecOptions) = TermRep (toDyn x, f x, g x) where
	f (TokensSpecOptions aa) = [explode aa]
	g (TokensSpecOptions _) xs = case TermRep.fArgs xs of [aa] -> toDyn ((TokensSpecOptions (TermRep.fDyn aa))::TokensSpecOptions) ; _ -> error "Term explosion error."

_tc_TokensSpecOptionsTc = mkTyCon "TokensSpecOptions"
instance Typeable TokensSpecOptions where
    typeOf x = mkTyConApp _tc_TokensSpecOptionsTc [ ]

instance Term SuperClass where
    explode (x::SuperClass) = TermRep (toDyn x, f x, g x) where
	f (SuperClass aa) = [explode aa]
	g (SuperClass _) xs = case TermRep.fArgs xs of [aa] -> toDyn ((SuperClass (TermRep.fDyn aa))::SuperClass) ; _ -> error "Term explosion error."

_tc_SuperClassTc = mkTyCon "SuperClass"
instance Typeable SuperClass where
    typeOf x = mkTyConApp _tc_SuperClassTc [ ]

instance Term ClassHeader where
    explode (x::ClassHeader) = TermRep (toDyn x, f x, g x) where
	f (LexClassHeader aa) = [explode aa]
	f (ClassHeader ab ac ad) = [explode ab,explode ac,explode ad]
	g (LexClassHeader _) xs = case TermRep.fArgs xs of [aa] -> toDyn ((LexClassHeader (TermRep.fDyn aa))::ClassHeader) ; _ -> error "Term explosion error."
	g (ClassHeader _ _ _) xs = case TermRep.fArgs xs of [ab,ac,ad] -> toDyn ((ClassHeader (TermRep.fDyn ab) (TermRep.fDyn ac) (TermRep.fDyn ad))::ClassHeader) ; _ -> error "Term explosion error."

_tc_ClassHeaderTc = mkTyCon "ClassHeader"
instance Typeable ClassHeader where
    typeOf x = mkTyConApp _tc_ClassHeaderTc [ ]

instance Term Spec where
    explode (x::Spec) = TermRep (toDyn x, f x, g x) where
	f (Spec aa ab ac ad) = [explode aa,explode ab,explode ac,explode ad]
	g (Spec _ _ _ _) xs = case TermRep.fArgs xs of [aa,ab,ac,ad] -> toDyn ((Spec (TermRep.fDyn aa) (TermRep.fDyn ab) (TermRep.fDyn ac) (TermRep.fDyn ad))::Spec) ; _ -> error "Term explosion error."

_tc_SpecTc = mkTyCon "Spec"
instance Typeable Spec where
    typeOf x = mkTyConApp _tc_SpecTc [ ]

instance Term Rule where
    explode (x::Rule) = TermRep (toDyn x, f x, g x) where
	f (Rule aa ab ac ad ae af ag ah ai aj ak) = [explode aa,explode ab,explode ac,explode ad,explode ae,explode af,explode ag,explode ah,explode ai,explode aj,explode ak]
	g (Rule _ _ _ _ _ _ _ _ _ _ _) xs = case TermRep.fArgs xs of [aa,ab,ac,ad,ae,af,ag,ah,ai,aj,ak] -> toDyn ((Rule (TermRep.fDyn aa) (TermRep.fDyn ab) (TermRep.fDyn ac) (TermRep.fDyn ad) (TermRep.fDyn ae) (TermRep.fDyn af) (TermRep.fDyn ag) (TermRep.fDyn ah) (TermRep.fDyn ai) (TermRep.fDyn aj) (TermRep.fDyn ak))::Rule) ; _ -> error "Term explosion error."

_tc_RuleTc = mkTyCon "Rule"
instance Typeable Rule where
    typeOf x = mkTyConApp _tc_RuleTc [ ]

instance Term ThrowsSpec where
    explode (x::ThrowsSpec) = TermRep (toDyn x, f x, g x) where
	f (ThrowsSpec aa) = [explode aa]
	g (ThrowsSpec _) xs = case TermRep.fArgs xs of [aa] -> toDyn ((ThrowsSpec (TermRep.fDyn aa))::ThrowsSpec) ; _ -> error "Term explosion error."

_tc_ThrowsSpecTc = mkTyCon "ThrowsSpec"
instance Typeable ThrowsSpec where
    typeOf x = mkTyConApp _tc_ThrowsSpecTc [ ]

instance Term Block where
    explode (x::Block) = TermRep (toDyn x, f x, g x) where
	f (Block aa) = [explode aa]
	g (Block _) xs = case TermRep.fArgs xs of [aa] -> toDyn ((Block (TermRep.fDyn aa))::Block) ; _ -> error "Term explosion error."

_tc_BlockTc = mkTyCon "Block"
instance Typeable Block where
    typeOf x = mkTyConApp _tc_BlockTc [ ]

instance Term Alternative where
    explode (x::Alternative) = TermRep (toDyn x, f x, g x) where
	f (Alternative aa ab ac) = [explode aa,explode ab,explode ac]
	g (Alternative _ _ _) xs = case TermRep.fArgs xs of [aa,ab,ac] -> toDyn ((Alternative (TermRep.fDyn aa) (TermRep.fDyn ab) (TermRep.fDyn ac))::Alternative) ; _ -> error "Term explosion error."

_tc_AlternativeTc = mkTyCon "Alternative"
instance Typeable Alternative where
    typeOf x = mkTyConApp _tc_AlternativeTc [ ]

instance Term ExceptionSpec where
    explode (x::ExceptionSpec) = TermRep (toDyn x, f x, g x) where
	f (ExceptionSpec aa ab) = [explode aa,explode ab]
	g (ExceptionSpec _ _) xs = case TermRep.fArgs xs of [aa,ab] -> toDyn ((ExceptionSpec (TermRep.fDyn aa) (TermRep.fDyn ab))::ExceptionSpec) ; _ -> error "Term explosion error."

_tc_ExceptionSpecTc = mkTyCon "ExceptionSpec"
instance Typeable ExceptionSpec where
    typeOf x = mkTyConApp _tc_ExceptionSpecTc [ ]

instance Term ExceptionSpecNoLabel where
    explode (x::ExceptionSpecNoLabel) = TermRep (toDyn x, f x, g x) where
	f (ExceptionSpecNoLabel aa) = [explode aa]
	g (ExceptionSpecNoLabel _) xs = case TermRep.fArgs xs of [aa] -> toDyn ((ExceptionSpecNoLabel (TermRep.fDyn aa))::ExceptionSpecNoLabel) ; _ -> error "Term explosion error."

_tc_ExceptionSpecNoLabelTc = mkTyCon "ExceptionSpecNoLabel"
instance Typeable ExceptionSpecNoLabel where
    typeOf x = mkTyConApp _tc_ExceptionSpecNoLabelTc [ ]

instance Term ExceptionHandler where
    explode (x::ExceptionHandler) = TermRep (toDyn x, f x, g x) where
	f (ExceptionHandler aa ab) = [explode aa,explode ab]
	g (ExceptionHandler _ _) xs = case TermRep.fArgs xs of [aa,ab] -> toDyn ((ExceptionHandler (TermRep.fDyn aa) (TermRep.fDyn ab))::ExceptionHandler) ; _ -> error "Term explosion error."

_tc_ExceptionHandlerTc = mkTyCon "ExceptionHandler"
instance Typeable ExceptionHandler where
    typeOf x = mkTyConApp _tc_ExceptionHandlerTc [ ]

instance Term Element where
    explode (x::Element) = TermRep (toDyn x, f x, g x) where
	f (Element aa ab) = [explode aa,explode ab]
	g (Element _ _) xs = case TermRep.fArgs xs of [aa,ab] -> toDyn ((Element (TermRep.fDyn aa) (TermRep.fDyn ab))::Element) ; _ -> error "Term explosion error."

_tc_ElementTc = mkTyCon "Element"
instance Typeable Element where
    typeOf x = mkTyConApp _tc_ElementTc [ ]

instance Term ElementOptionSpec where
    explode (x::ElementOptionSpec) = TermRep (toDyn x, f x, g x) where
	f (ElementOptionSpec aa) = [explode aa]
	g (ElementOptionSpec _) xs = case TermRep.fArgs xs of [aa] -> toDyn ((ElementOptionSpec (TermRep.fDyn aa))::ElementOptionSpec) ; _ -> error "Term explosion error."

_tc_ElementOptionSpecTc = mkTyCon "ElementOptionSpec"
instance Typeable ElementOptionSpec where
    typeOf x = mkTyConApp _tc_ElementOptionSpecTc [ ]

instance Term AssignElementBody where
    explode (x::AssignElementBody) = TermRep (toDyn x, f x, g x) where
	f (RuleRefElt aa ab ac) = [explode aa,explode ab,explode ac]
	f (TokenRefElt ad ae) = [explode ad,explode ae]
	g (RuleRefElt _ _ _) xs = case TermRep.fArgs xs of [aa,ab,ac] -> toDyn ((RuleRefElt (TermRep.fDyn aa) (TermRep.fDyn ab) (TermRep.fDyn ac))::AssignElementBody) ; _ -> error "Term explosion error."
	g (TokenRefElt _ _) xs = case TermRep.fArgs xs of [ad,ae] -> toDyn ((TokenRefElt (TermRep.fDyn ad) (TermRep.fDyn ae))::AssignElementBody) ; _ -> error "Term explosion error."

_tc_AssignElementBodyTc = mkTyCon "AssignElementBody"
instance Typeable AssignElementBody where
    typeOf x = mkTyConApp _tc_AssignElementBodyTc [ ]

instance Term NegatedElement where
    explode (x::NegatedElement) = TermRep (toDyn x, f x, g x) where
	f (NegatedNotTerminal aa) = [explode aa]
	f (NegatedEbnf ab) = [explode ab]
	g (NegatedNotTerminal _) xs = case TermRep.fArgs xs of [aa] -> toDyn ((NegatedNotTerminal (TermRep.fDyn aa))::NegatedElement) ; _ -> error "Term explosion error."
	g (NegatedEbnf _) xs = case TermRep.fArgs xs of [ab] -> toDyn ((NegatedEbnf (TermRep.fDyn ab))::NegatedElement) ; _ -> error "Term explosion error."

_tc_NegatedElementTc = mkTyCon "NegatedElement"
instance Typeable NegatedElement where
    typeOf x = mkTyConApp _tc_NegatedElementTc [ ]

instance Term NoAssignElementBody where
    explode (x::NoAssignElementBody) = TermRep (toDyn x, f x, g x) where
	f (RuleRefEltNoAssign aa ab ac) = [explode aa,explode ab,explode ac]
	f (RangeElt ad) = [explode ad]
	f (TerminalElt ae) = [explode ae]
	f (NegatedElt af) = [explode af]
	f (EbnfElt ag) = [explode ag]
	g (RuleRefEltNoAssign _ _ _) xs = case TermRep.fArgs xs of [aa,ab,ac] -> toDyn ((RuleRefEltNoAssign (TermRep.fDyn aa) (TermRep.fDyn ab) (TermRep.fDyn ac))::NoAssignElementBody) ; _ -> error "Term explosion error."
	g (RangeElt _) xs = case TermRep.fArgs xs of [ad] -> toDyn ((RangeElt (TermRep.fDyn ad))::NoAssignElementBody) ; _ -> error "Term explosion error."
	g (TerminalElt _) xs = case TermRep.fArgs xs of [ae] -> toDyn ((TerminalElt (TermRep.fDyn ae))::NoAssignElementBody) ; _ -> error "Term explosion error."
	g (NegatedElt _) xs = case TermRep.fArgs xs of [af] -> toDyn ((NegatedElt (TermRep.fDyn af))::NoAssignElementBody) ; _ -> error "Term explosion error."
	g (EbnfElt _) xs = case TermRep.fArgs xs of [ag] -> toDyn ((EbnfElt (TermRep.fDyn ag))::NoAssignElementBody) ; _ -> error "Term explosion error."

_tc_NoAssignElementBodyTc = mkTyCon "NoAssignElementBody"
instance Typeable NoAssignElementBody where
    typeOf x = mkTyConApp _tc_NoAssignElementBodyTc [ ]

instance Term ElementNoOptionSpec where
    explode (x::ElementNoOptionSpec) = TermRep (toDyn x, f x, g x) where
	f (AssignElement aa ab ac) = [explode aa,explode ab,explode ac]
	f (NoAssignElement ad ae) = [explode ad,explode ae]
	f (ActionElement af) = [explode af]
	f (SemPredElement ag) = [explode ag]
	f (TreeElement ah) = [explode ah]
	g (AssignElement _ _ _) xs = case TermRep.fArgs xs of [aa,ab,ac] -> toDyn ((AssignElement (TermRep.fDyn aa) (TermRep.fDyn ab) (TermRep.fDyn ac))::ElementNoOptionSpec) ; _ -> error "Term explosion error."
	g (NoAssignElement _ _) xs = case TermRep.fArgs xs of [ad,ae] -> toDyn ((NoAssignElement (TermRep.fDyn ad) (TermRep.fDyn ae))::ElementNoOptionSpec) ; _ -> error "Term explosion error."
	g (ActionElement _) xs = case TermRep.fArgs xs of [af] -> toDyn ((ActionElement (TermRep.fDyn af))::ElementNoOptionSpec) ; _ -> error "Term explosion error."
	g (SemPredElement _) xs = case TermRep.fArgs xs of [ag] -> toDyn ((SemPredElement (TermRep.fDyn ag))::ElementNoOptionSpec) ; _ -> error "Term explosion error."
	g (TreeElement _) xs = case TermRep.fArgs xs of [ah] -> toDyn ((TreeElement (TermRep.fDyn ah))::ElementNoOptionSpec) ; _ -> error "Term explosion error."

_tc_ElementNoOptionSpecTc = mkTyCon "ElementNoOptionSpec"
instance Typeable ElementNoOptionSpec where
    typeOf x = mkTyConApp _tc_ElementNoOptionSpecTc [ ]

instance Term Tree where
    explode (x::Tree) = TermRep (toDyn x, f x, g x) where
	f (Tree aa ab) = [explode aa,explode ab]
	g (Tree _ _) xs = case TermRep.fArgs xs of [aa,ab] -> toDyn ((Tree (TermRep.fDyn aa) (TermRep.fDyn ab))::Tree) ; _ -> error "Term explosion error."

_tc_TreeTc = mkTyCon "Tree"
instance Typeable Tree where
    typeOf x = mkTyConApp _tc_TreeTc [ ]

instance Term RootNode where
    explode (x::RootNode) = TermRep (toDyn x, f x, g x) where
	f (RootNode aa ab) = [explode aa,explode ab]
	g (RootNode _ _) xs = case TermRep.fArgs xs of [aa,ab] -> toDyn ((RootNode (TermRep.fDyn aa) (TermRep.fDyn ab))::RootNode) ; _ -> error "Term explosion error."

_tc_RootNodeTc = mkTyCon "RootNode"
instance Typeable RootNode where
    typeOf x = mkTyConApp _tc_RootNodeTc [ ]

instance Term OptionsSpecOrAction where
    explode (x::OptionsSpecOrAction) = TermRep (toDyn x, f x, g x) where
	f (OptionsSpecAndMaybeAction aa ab) = [explode aa,explode ab]
	f (Action ac) = [explode ac]
	g (OptionsSpecAndMaybeAction _ _) xs = case TermRep.fArgs xs of [aa,ab] -> toDyn ((OptionsSpecAndMaybeAction (TermRep.fDyn aa) (TermRep.fDyn ab))::OptionsSpecOrAction) ; _ -> error "Term explosion error."
	g (Action _) xs = case TermRep.fArgs xs of [ac] -> toDyn ((Action (TermRep.fDyn ac))::OptionsSpecOrAction) ; _ -> error "Term explosion error."

_tc_OptionsSpecOrActionTc = mkTyCon "OptionsSpecOrAction"
instance Typeable OptionsSpecOrAction where
    typeOf x = mkTyConApp _tc_OptionsSpecOrActionTc [ ]

instance Term RegExpOperator where
    explode (x::RegExpOperator) = TermRep (toDyn x, f x, g x) where
	f (Question aa) = [explode aa]
	f (Star ab) = [explode ab]
	f (Plus ac) = [explode ac]
	g (Question _) xs = case TermRep.fArgs xs of [aa] -> toDyn ((Question (TermRep.fDyn aa))::RegExpOperator) ; _ -> error "Term explosion error."
	g (Star _) xs = case TermRep.fArgs xs of [ab] -> toDyn ((Star (TermRep.fDyn ab))::RegExpOperator) ; _ -> error "Term explosion error."
	g (Plus _) xs = case TermRep.fArgs xs of [ac] -> toDyn ((Plus (TermRep.fDyn ac))::RegExpOperator) ; _ -> error "Term explosion error."

_tc_RegExpOperatorTc = mkTyCon "RegExpOperator"
instance Typeable RegExpOperator where
    typeOf x = mkTyConApp _tc_RegExpOperatorTc [ ]

instance Term EbnfBody where
    explode (x::EbnfBody) = TermRep (toDyn x, f x, g x) where
	f (EbnfBodyRegExp aa ab) = [explode aa,explode ab]
	f (EbnfBodyImplies ac) = [explode ac]
	g (EbnfBodyRegExp _ _) xs = case TermRep.fArgs xs of [aa,ab] -> toDyn ((EbnfBodyRegExp (TermRep.fDyn aa) (TermRep.fDyn ab))::EbnfBody) ; _ -> error "Term explosion error."
	g (EbnfBodyImplies _) xs = case TermRep.fArgs xs of [ac] -> toDyn ((EbnfBodyImplies (TermRep.fDyn ac))::EbnfBody) ; _ -> error "Term explosion error."

_tc_EbnfBodyTc = mkTyCon "EbnfBody"
instance Typeable EbnfBody where
    typeOf x = mkTyConApp _tc_EbnfBodyTc [ ]

instance Term Ebnf where
    explode (x::Ebnf) = TermRep (toDyn x, f x, g x) where
	f (Ebnf aa ab ac) = [explode aa,explode ab,explode ac]
	g (Ebnf _ _ _) xs = case TermRep.fArgs xs of [aa,ab,ac] -> toDyn ((Ebnf (TermRep.fDyn aa) (TermRep.fDyn ab) (TermRep.fDyn ac))::Ebnf) ; _ -> error "Term explosion error."

_tc_EbnfTc = mkTyCon "Ebnf"
instance Typeable Ebnf where
    typeOf x = mkTyConApp _tc_EbnfTc [ ]

instance Term Ast_type_spec where
    explode (x::Ast_type_spec) = TermRep (toDyn x, f x, g x) where
	f (CaretAstType aa) = [explode aa]
	f (BangAstType ab) = [explode ab]
	f NoAstType = []
	g (CaretAstType _) xs = case TermRep.fArgs xs of [aa] -> toDyn ((CaretAstType (TermRep.fDyn aa))::Ast_type_spec) ; _ -> error "Term explosion error."
	g (BangAstType _) xs = case TermRep.fArgs xs of [ab] -> toDyn ((BangAstType (TermRep.fDyn ab))::Ast_type_spec) ; _ -> error "Term explosion error."
	g NoAstType xs = case TermRep.fArgs xs of [] -> toDyn ((NoAstType)::Ast_type_spec) ; _ -> error "Term explosion error."

_tc_Ast_type_specTc = mkTyCon "Ast_type_spec"
instance Typeable Ast_type_spec where
    typeOf x = mkTyConApp _tc_Ast_type_specTc [ ]

instance Term TokenRefOrStringLit where
    explode (x::TokenRefOrStringLit) = TermRep (toDyn x, f x, g x) where
	f (TokenRef aa) = [explode aa]
	f (StringLit ab) = [explode ab]
	g (TokenRef _) xs = case TermRep.fArgs xs of [aa] -> toDyn ((TokenRef (TermRep.fDyn aa))::TokenRefOrStringLit) ; _ -> error "Term explosion error."
	g (StringLit _) xs = case TermRep.fArgs xs of [ab] -> toDyn ((StringLit (TermRep.fDyn ab))::TokenRefOrStringLit) ; _ -> error "Term explosion error."

_tc_TokenRefOrStringLitTc = mkTyCon "TokenRefOrStringLit"
instance Typeable TokenRefOrStringLit where
    typeOf x = mkTyConApp _tc_TokenRefOrStringLitTc [ ]

instance Term Range where
    explode (x::Range) = TermRep (toDyn x, f x, g x) where
	f (CharRange aa ab ac) = [explode aa,explode ab,explode ac]
	f (StringTokenRange ad ae af) = [explode ad,explode ae,explode af]
	g (CharRange _ _ _) xs = case TermRep.fArgs xs of [aa,ab,ac] -> toDyn ((CharRange (TermRep.fDyn aa) (TermRep.fDyn ab) (TermRep.fDyn ac))::Range) ; _ -> error "Term explosion error."
	g (StringTokenRange _ _ _) xs = case TermRep.fArgs xs of [ad,ae,af] -> toDyn ((StringTokenRange (TermRep.fDyn ad) (TermRep.fDyn ae) (TermRep.fDyn af))::Range) ; _ -> error "Term explosion error."

_tc_RangeTc = mkTyCon "Range"
instance Typeable Range where
    typeOf x = mkTyConApp _tc_RangeTc [ ]

instance Term Terminal where
    explode (x::Terminal) = TermRep (toDyn x, f x, g x) where
	f (CharLiteralT aa ab) = [explode aa,explode ab]
	f (TokenRefT ac ad ae) = [explode ac,explode ad,explode ae]
	f (StringLiteralT af ag) = [explode af,explode ag]
	f (WildCardT ah) = [explode ah]
	g (CharLiteralT _ _) xs = case TermRep.fArgs xs of [aa,ab] -> toDyn ((CharLiteralT (TermRep.fDyn aa) (TermRep.fDyn ab))::Terminal) ; _ -> error "Term explosion error."
	g (TokenRefT _ _ _) xs = case TermRep.fArgs xs of [ac,ad,ae] -> toDyn ((TokenRefT (TermRep.fDyn ac) (TermRep.fDyn ad) (TermRep.fDyn ae))::Terminal) ; _ -> error "Term explosion error."
	g (StringLiteralT _ _) xs = case TermRep.fArgs xs of [af,ag] -> toDyn ((StringLiteralT (TermRep.fDyn af) (TermRep.fDyn ag))::Terminal) ; _ -> error "Term explosion error."
	g (WildCardT _) xs = case TermRep.fArgs xs of [ah] -> toDyn ((WildCardT (TermRep.fDyn ah))::Terminal) ; _ -> error "Term explosion error."

_tc_TerminalTc = mkTyCon "Terminal"
instance Typeable Terminal where
    typeOf x = mkTyConApp _tc_TerminalTc [ ]

instance Term NotTerminal where
    explode (x::NotTerminal) = TermRep (toDyn x, f x, g x) where
	f (CharLiteralNT aa ab) = [explode aa,explode ab]
	f (TokenRefNT ac ad) = [explode ac,explode ad]
	g (CharLiteralNT _ _) xs = case TermRep.fArgs xs of [aa,ab] -> toDyn ((CharLiteralNT (TermRep.fDyn aa) (TermRep.fDyn ab))::NotTerminal) ; _ -> error "Term explosion error."
	g (TokenRefNT _ _) xs = case TermRep.fArgs xs of [ac,ad] -> toDyn ((TokenRefNT (TermRep.fDyn ac) (TermRep.fDyn ad))::NotTerminal) ; _ -> error "Term explosion error."

_tc_NotTerminalTc = mkTyCon "NotTerminal"
instance Typeable NotTerminal where
    typeOf x = mkTyConApp _tc_NotTerminalTc [ ]

instance Term QualifiedID where
    explode (x::QualifiedID) = TermRep (toDyn x, f x, g x) where
	f (QualifiedID aa) = [explode aa]
	g (QualifiedID _) xs = case TermRep.fArgs xs of [aa] -> toDyn ((QualifiedID (TermRep.fDyn aa))::QualifiedID) ; _ -> error "Term explosion error."

_tc_QualifiedIDTc = mkTyCon "QualifiedID"
instance Typeable QualifiedID where
    typeOf x = mkTyConApp _tc_QualifiedIDTc [ ]

instance Term Id where
    explode (x::Id) = TermRep (toDyn x, f x, g x) where
	f (TokenRefId aa) = [explode aa]
	f (RuleRefId ab) = [explode ab]
	g (TokenRefId _) xs = case TermRep.fArgs xs of [aa] -> toDyn ((TokenRefId (TermRep.fDyn aa))::Id) ; _ -> error "Term explosion error."
	g (RuleRefId _) xs = case TermRep.fArgs xs of [ab] -> toDyn ((RuleRefId (TermRep.fDyn ab))::Id) ; _ -> error "Term explosion error."

_tc_IdTc = mkTyCon "Id"
instance Typeable Id where
    typeOf x = mkTyConApp _tc_IdTc [ ]

--  Imported from other files :-
