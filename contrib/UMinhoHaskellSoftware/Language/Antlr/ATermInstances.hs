module Language.Antlr.ATermInstances where

import Language.Antlr.Syntax
import ATermLib

{- Generated by DrIFT (Automatic class derivations for Haskell) -}
{-# LINE 1 "Syntax.hs" #-}
{-* Generated by DrIFT : Look, but Don't Touch. *-}
instance ATermConvertible GrammarHeader where
    toATerm (GrammarHeader aa ab) = (AAppl "GrammarHeader" [ toATerm aa,toATerm ab ])
    fromATerm (AAppl "GrammarHeader" [ aa,ab ]) = let aa' = fromATerm aa
						      ab' = fromATerm ab in (GrammarHeader aa' ab')
    fromATerm u = fromATermError "GrammarHeader" u

instance ATermConvertible Grammar where
    toATerm (Grammar aa ab ac) = (AAppl "Grammar" [ toATerm aa,toATerm ab,toATerm ac ])
    fromATerm (AAppl "Grammar" [ aa,ab,ac ]) = let aa' = fromATerm aa
						   ab' = fromATerm ab
						   ac' = fromATerm ac in (Grammar aa' ab' ac')
    fromATerm u = fromATermError "Grammar" u

instance ATermConvertible ClassDef where
    toATerm (ClassDef aa ab ac ad) = (AAppl "ClassDef" [ toATerm aa,toATerm ab,toATerm ac,toATerm ad ])
    fromATerm (AAppl "ClassDef" [ aa,ab,ac,ad ]) = let aa' = fromATerm aa
						       ab' = fromATerm ab
						       ac' = fromATerm ac
						       ad' = fromATerm ad in (ClassDef aa' ab' ac' ad')
    fromATerm u = fromATermError "ClassDef" u

instance ATermConvertible OptionAssignmentSemi where
    toATerm (OptionAssignmentSemi aa ab) = (AAppl "OptionAssignmentSemi" [ toATerm aa,toATerm ab ])
    fromATerm (AAppl "OptionAssignmentSemi" [ aa,ab ]) = let aa' = fromATerm aa
							     ab' = fromATerm ab in (OptionAssignmentSemi aa' ab')
    fromATerm u = fromATermError "OptionAssignmentSemi" u

instance ATermConvertible OptionAssignment where
    toATerm (OptionAssignment aa ab) = (AAppl "OptionAssignment" [ toATerm aa,toATerm ab ])
    fromATerm (AAppl "OptionAssignment" [ aa,ab ]) = let aa' = fromATerm aa
							 ab' = fromATerm ab in (OptionAssignment aa' ab')
    fromATerm u = fromATermError "OptionAssignment" u

instance ATermConvertible OptionsSpec where
    toATerm (OptionsSpec aa) = (AAppl "OptionsSpec" [ toATerm aa ])
    fromATerm (AAppl "OptionsSpec" [ aa ]) = let aa' = fromATerm aa in (OptionsSpec aa')
    fromATerm u = fromATermError "OptionsSpec" u

instance ATermConvertible SingleOptionSpec where
    toATerm (LexOption aa) = (AAppl "LexOption" [ toATerm aa ])
    toATerm (Option aa ab) = (AAppl "Option" [ toATerm aa,toATerm ab ])
    fromATerm (AAppl "LexOption" [ aa ]) = let aa' = fromATerm aa in (LexOption aa')
    fromATerm (AAppl "Option" [ aa,ab ]) = let aa' = fromATerm aa
					       ab' = fromATerm ab in (Option aa' ab')
    fromATerm u = fromATermError "SingleOptionSpec" u

instance ATermConvertible LexerOptionsSpec where
    toATerm (LexerOptionsSpec aa) = (AAppl "LexerOptionsSpec" [ toATerm aa ])
    fromATerm (AAppl "LexerOptionsSpec" [ aa ]) = let aa' = fromATerm aa in (LexerOptionsSpec aa')
    fromATerm u = fromATermError "LexerOptionsSpec" u

instance ATermConvertible OptionValue where
    toATerm (IdValue aa) = (AAppl "IdValue" [ toATerm aa ])
    toATerm (StringValue aa) = (AAppl "StringValue" [ toATerm aa ])
    toATerm (CharValue aa) = (AAppl "CharValue" [ toATerm aa ])
    toATerm (IntValue aa) = (AAppl "IntValue" [ toATerm aa ])
    fromATerm (AAppl "IdValue" [ aa ]) = let aa' = fromATerm aa in (IdValue aa')
    fromATerm (AAppl "StringValue" [ aa ]) = let aa' = fromATerm aa in (StringValue aa')
    fromATerm (AAppl "CharValue" [ aa ]) = let aa' = fromATerm aa in (CharValue aa')
    fromATerm (AAppl "IntValue" [ aa ]) = let aa' = fromATerm aa in (IntValue aa')
    fromATerm u = fromATermError "OptionValue" u

instance ATermConvertible CharSet where
    toATerm (CharSet aa) = (AAppl "CharSet" [ toATerm aa ])
    fromATerm (AAppl "CharSet" [ aa ]) = let aa' = fromATerm aa in (CharSet aa')
    fromATerm u = fromATermError "CharSet" u

instance ATermConvertible SetBlockElement where
    toATerm (SetBlockElement aa ab) = (AAppl "SetBlockElement" [ toATerm aa,toATerm ab ])
    fromATerm (AAppl "SetBlockElement" [ aa,ab ]) = let aa' = fromATerm aa
							ab' = fromATerm ab in (SetBlockElement aa' ab')
    fromATerm u = fromATermError "SetBlockElement" u

instance ATermConvertible SingleTokenSpec where
    toATerm (TokenRefSpec aa ab ac) = (AAppl "TokenRefSpec" [ toATerm aa,toATerm ab,toATerm ac ])
    toATerm (StringLitTokenSpec aa ab) = (AAppl "StringLitTokenSpec" [ toATerm aa,toATerm ab ])
    fromATerm (AAppl "TokenRefSpec" [ aa,ab,ac ]) = let aa' = fromATerm aa
							ab' = fromATerm ab
							ac' = fromATerm ac in (TokenRefSpec aa' ab' ac')
    fromATerm (AAppl "StringLitTokenSpec" [ aa,ab ]) = let aa' = fromATerm aa
							   ab' = fromATerm ab in (StringLitTokenSpec aa' ab')
    fromATerm u = fromATermError "SingleTokenSpec" u

instance ATermConvertible TokensSpec where
    toATerm (TokensSpec aa) = (AAppl "TokensSpec" [ toATerm aa ])
    fromATerm (AAppl "TokensSpec" [ aa ]) = let aa' = fromATerm aa in (TokensSpec aa')
    fromATerm u = fromATermError "TokensSpec" u

instance ATermConvertible TokensSpecOptions where
    toATerm (TokensSpecOptions aa) = (AAppl "TokensSpecOptions" [ toATerm aa ])
    fromATerm (AAppl "TokensSpecOptions" [ aa ]) = let aa' = fromATerm aa in (TokensSpecOptions aa')
    fromATerm u = fromATermError "TokensSpecOptions" u

instance ATermConvertible SuperClass where
    toATerm (SuperClass aa) = (AAppl "SuperClass" [ toATerm aa ])
    fromATerm (AAppl "SuperClass" [ aa ]) = let aa' = fromATerm aa in (SuperClass aa')
    fromATerm u = fromATermError "SuperClass" u

instance ATermConvertible ClassHeader where
    toATerm (LexClassHeader aa) = (AAppl "LexClassHeader" [ toATerm aa ])
    toATerm (ClassHeader aa ab ac) = (AAppl "ClassHeader" [ toATerm aa,toATerm ab,toATerm ac ])
    fromATerm (AAppl "LexClassHeader" [ aa ]) = let aa' = fromATerm aa in (LexClassHeader aa')
    fromATerm (AAppl "ClassHeader" [ aa,ab,ac ]) = let aa' = fromATerm aa
						       ab' = fromATerm ab
						       ac' = fromATerm ac in (ClassHeader aa' ab' ac')
    fromATerm u = fromATermError "ClassHeader" u

instance ATermConvertible Spec where
    toATerm (Spec aa ab ac ad) = (AAppl "Spec" [ toATerm aa,toATerm ab,toATerm ac,toATerm ad ])
    fromATerm (AAppl "Spec" [ aa,ab,ac,ad ]) = let aa' = fromATerm aa
						   ab' = fromATerm ab
						   ac' = fromATerm ac
						   ad' = fromATerm ad in (Spec aa' ab' ac' ad')
    fromATerm u = fromATermError "Spec" u

instance ATermConvertible Rule where
    toATerm (Rule aa ab ac ad ae af ag ah ai aj ak) = (AAppl "Rule" [ toATerm aa,toATerm ab,toATerm ac,toATerm ad,toATerm ae,toATerm af,toATerm ag,toATerm ah,toATerm ai,toATerm aj,toATerm ak ])
    fromATerm (AAppl "Rule" [ aa,ab,ac,ad,ae,af,ag,ah,ai,aj,ak ]) = let aa' = fromATerm aa
									ab' = fromATerm ab
									ac' = fromATerm ac
									ad' = fromATerm ad
									ae' = fromATerm ae
									af' = fromATerm af
									ag' = fromATerm ag
									ah' = fromATerm ah
									ai' = fromATerm ai
									aj' = fromATerm aj
									ak' = fromATerm ak in (Rule aa' ab' ac' ad' ae' af' ag' ah' ai' aj' ak')
    fromATerm u = fromATermError "Rule" u

instance ATermConvertible ThrowsSpec where
    toATerm (ThrowsSpec aa) = (AAppl "ThrowsSpec" [ toATerm aa ])
    fromATerm (AAppl "ThrowsSpec" [ aa ]) = let aa' = fromATerm aa in (ThrowsSpec aa')
    fromATerm u = fromATermError "ThrowsSpec" u

instance ATermConvertible Block where
    toATerm (Block aa) = (AAppl "Block" [ toATerm aa ])
    fromATerm (AAppl "Block" [ aa ]) = let aa' = fromATerm aa in (Block aa')
    fromATerm u = fromATermError "Block" u

instance ATermConvertible Alternative where
    toATerm (Alternative aa ab ac) = (AAppl "Alternative" [ toATerm aa,toATerm ab,toATerm ac ])
    fromATerm (AAppl "Alternative" [ aa,ab,ac ]) = let aa' = fromATerm aa
						       ab' = fromATerm ab
						       ac' = fromATerm ac in (Alternative aa' ab' ac')
    fromATerm u = fromATermError "Alternative" u

instance ATermConvertible ExceptionSpec where
    toATerm (ExceptionSpec aa ab) = (AAppl "ExceptionSpec" [ toATerm aa,toATerm ab ])
    fromATerm (AAppl "ExceptionSpec" [ aa,ab ]) = let aa' = fromATerm aa
						      ab' = fromATerm ab in (ExceptionSpec aa' ab')
    fromATerm u = fromATermError "ExceptionSpec" u

instance ATermConvertible ExceptionSpecNoLabel where
    toATerm (ExceptionSpecNoLabel aa) = (AAppl "ExceptionSpecNoLabel" [ toATerm aa ])
    fromATerm (AAppl "ExceptionSpecNoLabel" [ aa ]) = let aa' = fromATerm aa in (ExceptionSpecNoLabel aa')
    fromATerm u = fromATermError "ExceptionSpecNoLabel" u

instance ATermConvertible ExceptionHandler where
    toATerm (ExceptionHandler aa ab) = (AAppl "ExceptionHandler" [ toATerm aa,toATerm ab ])
    fromATerm (AAppl "ExceptionHandler" [ aa,ab ]) = let aa' = fromATerm aa
							 ab' = fromATerm ab in (ExceptionHandler aa' ab')
    fromATerm u = fromATermError "ExceptionHandler" u

instance ATermConvertible Element where
    toATerm (Element aa ab) = (AAppl "Element" [ toATerm aa,toATerm ab ])
    fromATerm (AAppl "Element" [ aa,ab ]) = let aa' = fromATerm aa
						ab' = fromATerm ab in (Element aa' ab')
    fromATerm u = fromATermError "Element" u

instance ATermConvertible ElementOptionSpec where
    toATerm (ElementOptionSpec aa) = (AAppl "ElementOptionSpec" [ toATerm aa ])
    fromATerm (AAppl "ElementOptionSpec" [ aa ]) = let aa' = fromATerm aa in (ElementOptionSpec aa')
    fromATerm u = fromATermError "ElementOptionSpec" u

instance ATermConvertible AssignElementBody where
    toATerm (RuleRefElt aa ab ac) = (AAppl "RuleRefElt" [ toATerm aa,toATerm ab,toATerm ac ])
    toATerm (TokenRefElt aa ab) = (AAppl "TokenRefElt" [ toATerm aa,toATerm ab ])
    fromATerm (AAppl "RuleRefElt" [ aa,ab,ac ]) = let aa' = fromATerm aa
						      ab' = fromATerm ab
						      ac' = fromATerm ac in (RuleRefElt aa' ab' ac')
    fromATerm (AAppl "TokenRefElt" [ aa,ab ]) = let aa' = fromATerm aa
						    ab' = fromATerm ab in (TokenRefElt aa' ab')
    fromATerm u = fromATermError "AssignElementBody" u

instance ATermConvertible NegatedElement where
    toATerm (NegatedNotTerminal aa) = (AAppl "NegatedNotTerminal" [ toATerm aa ])
    toATerm (NegatedEbnf aa) = (AAppl "NegatedEbnf" [ toATerm aa ])
    fromATerm (AAppl "NegatedNotTerminal" [ aa ]) = let aa' = fromATerm aa in (NegatedNotTerminal aa')
    fromATerm (AAppl "NegatedEbnf" [ aa ]) = let aa' = fromATerm aa in (NegatedEbnf aa')
    fromATerm u = fromATermError "NegatedElement" u

instance ATermConvertible NoAssignElementBody where
    toATerm (RuleRefEltNoAssign aa ab ac) = (AAppl "RuleRefEltNoAssign" [ toATerm aa,toATerm ab,toATerm ac ])
    toATerm (RangeElt aa) = (AAppl "RangeElt" [ toATerm aa ])
    toATerm (TerminalElt aa) = (AAppl "TerminalElt" [ toATerm aa ])
    toATerm (NegatedElt aa) = (AAppl "NegatedElt" [ toATerm aa ])
    toATerm (EbnfElt aa) = (AAppl "EbnfElt" [ toATerm aa ])
    fromATerm (AAppl "RuleRefEltNoAssign" [ aa,ab,ac ]) = let aa' = fromATerm aa
							      ab' = fromATerm ab
							      ac' = fromATerm ac in (RuleRefEltNoAssign aa' ab' ac')
    fromATerm (AAppl "RangeElt" [ aa ]) = let aa' = fromATerm aa in (RangeElt aa')
    fromATerm (AAppl "TerminalElt" [ aa ]) = let aa' = fromATerm aa in (TerminalElt aa')
    fromATerm (AAppl "NegatedElt" [ aa ]) = let aa' = fromATerm aa in (NegatedElt aa')
    fromATerm (AAppl "EbnfElt" [ aa ]) = let aa' = fromATerm aa in (EbnfElt aa')
    fromATerm u = fromATermError "NoAssignElementBody" u

instance ATermConvertible ElementNoOptionSpec where
    toATerm (AssignElement aa ab ac) = (AAppl "AssignElement" [ toATerm aa,toATerm ab,toATerm ac ])
    toATerm (NoAssignElement aa ab) = (AAppl "NoAssignElement" [ toATerm aa,toATerm ab ])
    toATerm (ActionElement aa) = (AAppl "ActionElement" [ toATerm aa ])
    toATerm (SemPredElement aa) = (AAppl "SemPredElement" [ toATerm aa ])
    toATerm (TreeElement aa) = (AAppl "TreeElement" [ toATerm aa ])
    fromATerm (AAppl "AssignElement" [ aa,ab,ac ]) = let aa' = fromATerm aa
							 ab' = fromATerm ab
							 ac' = fromATerm ac in (AssignElement aa' ab' ac')
    fromATerm (AAppl "NoAssignElement" [ aa,ab ]) = let aa' = fromATerm aa
							ab' = fromATerm ab in (NoAssignElement aa' ab')
    fromATerm (AAppl "ActionElement" [ aa ]) = let aa' = fromATerm aa in (ActionElement aa')
    fromATerm (AAppl "SemPredElement" [ aa ]) = let aa' = fromATerm aa in (SemPredElement aa')
    fromATerm (AAppl "TreeElement" [ aa ]) = let aa' = fromATerm aa in (TreeElement aa')
    fromATerm u = fromATermError "ElementNoOptionSpec" u

instance ATermConvertible Tree where
    toATerm (Tree aa ab) = (AAppl "Tree" [ toATerm aa,toATerm ab ])
    fromATerm (AAppl "Tree" [ aa,ab ]) = let aa' = fromATerm aa
					     ab' = fromATerm ab in (Tree aa' ab')
    fromATerm u = fromATermError "Tree" u

instance ATermConvertible RootNode where
    toATerm (RootNode aa ab) = (AAppl "RootNode" [ toATerm aa,toATerm ab ])
    fromATerm (AAppl "RootNode" [ aa,ab ]) = let aa' = fromATerm aa
						 ab' = fromATerm ab in (RootNode aa' ab')
    fromATerm u = fromATermError "RootNode" u

instance ATermConvertible OptionsSpecOrAction where
    toATerm (OptionsSpecAndMaybeAction aa ab) = (AAppl "OptionsSpecAndMaybeAction" [ toATerm aa,toATerm ab ])
    toATerm (Action aa) = (AAppl "Action" [ toATerm aa ])
    fromATerm (AAppl "OptionsSpecAndMaybeAction" [ aa,ab ]) = let aa' = fromATerm aa
								  ab' = fromATerm ab in (OptionsSpecAndMaybeAction aa' ab')
    fromATerm (AAppl "Action" [ aa ]) = let aa' = fromATerm aa in (Action aa')
    fromATerm u = fromATermError "OptionsSpecOrAction" u

instance ATermConvertible RegExpOperator where
    toATerm (Question aa) = (AAppl "Question" [ toATerm aa ])
    toATerm (Star aa) = (AAppl "Star" [ toATerm aa ])
    toATerm (Plus aa) = (AAppl "Plus" [ toATerm aa ])
    fromATerm (AAppl "Question" [ aa ]) = let aa' = fromATerm aa in (Question aa')
    fromATerm (AAppl "Star" [ aa ]) = let aa' = fromATerm aa in (Star aa')
    fromATerm (AAppl "Plus" [ aa ]) = let aa' = fromATerm aa in (Plus aa')
    fromATerm u = fromATermError "RegExpOperator" u

instance ATermConvertible EbnfBody where
    toATerm (EbnfBodyRegExp aa ab) = (AAppl "EbnfBodyRegExp" [ toATerm aa,toATerm ab ])
    toATerm (EbnfBodyImplies aa) = (AAppl "EbnfBodyImplies" [ toATerm aa ])
    fromATerm (AAppl "EbnfBodyRegExp" [ aa,ab ]) = let aa' = fromATerm aa
						       ab' = fromATerm ab in (EbnfBodyRegExp aa' ab')
    fromATerm (AAppl "EbnfBodyImplies" [ aa ]) = let aa' = fromATerm aa in (EbnfBodyImplies aa')
    fromATerm u = fromATermError "EbnfBody" u

instance ATermConvertible Ebnf where
    toATerm (Ebnf aa ab ac) = (AAppl "Ebnf" [ toATerm aa,toATerm ab,toATerm ac ])
    fromATerm (AAppl "Ebnf" [ aa,ab,ac ]) = let aa' = fromATerm aa
						ab' = fromATerm ab
						ac' = fromATerm ac in (Ebnf aa' ab' ac')
    fromATerm u = fromATermError "Ebnf" u

instance ATermConvertible Ast_type_spec where
    toATerm (CaretAstType aa) = (AAppl "CaretAstType" [ toATerm aa ])
    toATerm (BangAstType aa) = (AAppl "BangAstType" [ toATerm aa ])
    toATerm NoAstType = (AAppl "NoAstType" [ ])
    fromATerm (AAppl "CaretAstType" [ aa ]) = let aa' = fromATerm aa in (CaretAstType aa')
    fromATerm (AAppl "BangAstType" [ aa ]) = let aa' = fromATerm aa in (BangAstType aa')
    fromATerm (AAppl "NoAstType" [ ]) = let in NoAstType
    fromATerm u = fromATermError "Ast_type_spec" u

instance ATermConvertible TokenRefOrStringLit where
    toATerm (TokenRef aa) = (AAppl "TokenRef" [ toATerm aa ])
    toATerm (StringLit aa) = (AAppl "StringLit" [ toATerm aa ])
    fromATerm (AAppl "TokenRef" [ aa ]) = let aa' = fromATerm aa in (TokenRef aa')
    fromATerm (AAppl "StringLit" [ aa ]) = let aa' = fromATerm aa in (StringLit aa')
    fromATerm u = fromATermError "TokenRefOrStringLit" u

instance ATermConvertible Range where
    toATerm (CharRange aa ab ac) = (AAppl "CharRange" [ toATerm aa,toATerm ab,toATerm ac ])
    toATerm (StringTokenRange aa ab ac) = (AAppl "StringTokenRange" [ toATerm aa,toATerm ab,toATerm ac ])
    fromATerm (AAppl "CharRange" [ aa,ab,ac ]) = let aa' = fromATerm aa
						     ab' = fromATerm ab
						     ac' = fromATerm ac in (CharRange aa' ab' ac')
    fromATerm (AAppl "StringTokenRange" [ aa,ab,ac ]) = let aa' = fromATerm aa
							    ab' = fromATerm ab
							    ac' = fromATerm ac in (StringTokenRange aa' ab' ac')
    fromATerm u = fromATermError "Range" u

instance ATermConvertible Terminal where
    toATerm (CharLiteralT aa ab) = (AAppl "CharLiteralT" [ toATerm aa,toATerm ab ])
    toATerm (TokenRefT aa ab ac) = (AAppl "TokenRefT" [ toATerm aa,toATerm ab,toATerm ac ])
    toATerm (StringLiteralT aa ab) = (AAppl "StringLiteralT" [ toATerm aa,toATerm ab ])
    toATerm (WildCardT aa) = (AAppl "WildCardT" [ toATerm aa ])
    fromATerm (AAppl "CharLiteralT" [ aa,ab ]) = let aa' = fromATerm aa
						     ab' = fromATerm ab in (CharLiteralT aa' ab')
    fromATerm (AAppl "TokenRefT" [ aa,ab,ac ]) = let aa' = fromATerm aa
						     ab' = fromATerm ab
						     ac' = fromATerm ac in (TokenRefT aa' ab' ac')
    fromATerm (AAppl "StringLiteralT" [ aa,ab ]) = let aa' = fromATerm aa
						       ab' = fromATerm ab in (StringLiteralT aa' ab')
    fromATerm (AAppl "WildCardT" [ aa ]) = let aa' = fromATerm aa in (WildCardT aa')
    fromATerm u = fromATermError "Terminal" u

instance ATermConvertible NotTerminal where
    toATerm (CharLiteralNT aa ab) = (AAppl "CharLiteralNT" [ toATerm aa,toATerm ab ])
    toATerm (TokenRefNT aa ab) = (AAppl "TokenRefNT" [ toATerm aa,toATerm ab ])
    fromATerm (AAppl "CharLiteralNT" [ aa,ab ]) = let aa' = fromATerm aa
						      ab' = fromATerm ab in (CharLiteralNT aa' ab')
    fromATerm (AAppl "TokenRefNT" [ aa,ab ]) = let aa' = fromATerm aa
						   ab' = fromATerm ab in (TokenRefNT aa' ab')
    fromATerm u = fromATermError "NotTerminal" u

instance ATermConvertible QualifiedID where
    toATerm (QualifiedID aa) = (AAppl "QualifiedID" [ toATerm aa ])
    fromATerm (AAppl "QualifiedID" [ aa ]) = let aa' = fromATerm aa in (QualifiedID aa')
    fromATerm u = fromATermError "QualifiedID" u

instance ATermConvertible Id where
    toATerm (TokenRefId aa) = (AAppl "TokenRefId" [ toATerm aa ])
    toATerm (RuleRefId aa) = (AAppl "RuleRefId" [ toATerm aa ])
    fromATerm (AAppl "TokenRefId" [ aa ]) = let aa' = fromATerm aa in (TokenRefId aa')
    fromATerm (AAppl "RuleRefId" [ aa ]) = let aa' = fromATerm aa in (RuleRefId aa')
    fromATerm u = fromATermError "Id" u

--  Imported from other files :-
