module Language.Bison.TermInstances where

import Language.Bison.Syntax
import TermRep

{- Generated by DrIFT (Automatic class derivations for Haskell) -}
{-# LINE 1 "Syntax.hs" #-}
{-* Generated by DrIFT : Look, but Don't Touch. *-}
instance Term BisonSyntax where
    explode (x::BisonSyntax) = TermRep (toDyn x, f x, g x) where
	f (BisonSyntax aa ab ac) = [explode aa,explode ab,explode ac]
	g (BisonSyntax _ _ _) xs = case TermRep.fArgs xs of [aa,ab,ac] -> toDyn ((BisonSyntax (TermRep.fDyn aa) (TermRep.fDyn ab) (TermRep.fDyn ac))::BisonSyntax) ; _ -> error "Term explosion error."

_tc_BisonSyntaxTc = mkTyCon "BisonSyntax"
instance Typeable BisonSyntax where
    typeOf x = mkTyConApp _tc_BisonSyntaxTc [ ]

instance Term Declaration where
    explode (x::Declaration) = TermRep (toDyn x, f x, g x) where
	f (GrammarDecl aa) = [explode aa]
	f (PrologueDecl ab) = [explode ab]
	f DebugDecl = []
	f (DefineDecl ac ad) = [explode ac,explode ad]
	f DefinesDecl = []
	f ErrorVerboseDecl = []
	f (ExpectDecl ae) = [explode ae]
	f (ExpectRRDecl af ag) = [explode af,explode ag]
	f (FilePrefixDecl ah) = [explode ah]
	f GlrParserDecl = []
	f (InitialActionDecl ai) = [explode ai]
	f (LexParamDecl aj) = [explode aj]
	f LocationsDecl = []
	f (NamePrefixDecl ak al) = [explode ak,explode al]
	f (NoLinesDecl am) = [explode am]
	f NonDetParserDecl = []
	f (OutputDecl an) = [explode an]
	f (ParseParamDecl ao) = [explode ao]
	f (PureParserDecl ap) = [explode ap]
	f (SkeletonDecl aq) = [explode aq]
	f (TokenTableDecl ar) = [explode ar]
	f VerboseDecl = []
	f YaccDecl = []
	f SemiColon = []
	g (GrammarDecl _) xs = case TermRep.fArgs xs of [aa] -> toDyn ((GrammarDecl (TermRep.fDyn aa))::Declaration) ; _ -> error "Term explosion error."
	g (PrologueDecl _) xs = case TermRep.fArgs xs of [ab] -> toDyn ((PrologueDecl (TermRep.fDyn ab))::Declaration) ; _ -> error "Term explosion error."
	g DebugDecl xs = case TermRep.fArgs xs of [] -> toDyn ((DebugDecl)::Declaration) ; _ -> error "Term explosion error."
	g (DefineDecl _ _) xs = case TermRep.fArgs xs of [ac,ad] -> toDyn ((DefineDecl (TermRep.fDyn ac) (TermRep.fDyn ad))::Declaration) ; _ -> error "Term explosion error."
	g DefinesDecl xs = case TermRep.fArgs xs of [] -> toDyn ((DefinesDecl)::Declaration) ; _ -> error "Term explosion error."
	g ErrorVerboseDecl xs = case TermRep.fArgs xs of [] -> toDyn ((ErrorVerboseDecl)::Declaration) ; _ -> error "Term explosion error."
	g (ExpectDecl _) xs = case TermRep.fArgs xs of [ae] -> toDyn ((ExpectDecl (TermRep.fDyn ae))::Declaration) ; _ -> error "Term explosion error."
	g (ExpectRRDecl _ _) xs = case TermRep.fArgs xs of [af,ag] -> toDyn ((ExpectRRDecl (TermRep.fDyn af) (TermRep.fDyn ag))::Declaration) ; _ -> error "Term explosion error."
	g (FilePrefixDecl _) xs = case TermRep.fArgs xs of [ah] -> toDyn ((FilePrefixDecl (TermRep.fDyn ah))::Declaration) ; _ -> error "Term explosion error."
	g GlrParserDecl xs = case TermRep.fArgs xs of [] -> toDyn ((GlrParserDecl)::Declaration) ; _ -> error "Term explosion error."
	g (InitialActionDecl _) xs = case TermRep.fArgs xs of [ai] -> toDyn ((InitialActionDecl (TermRep.fDyn ai))::Declaration) ; _ -> error "Term explosion error."
	g (LexParamDecl _) xs = case TermRep.fArgs xs of [aj] -> toDyn ((LexParamDecl (TermRep.fDyn aj))::Declaration) ; _ -> error "Term explosion error."
	g LocationsDecl xs = case TermRep.fArgs xs of [] -> toDyn ((LocationsDecl)::Declaration) ; _ -> error "Term explosion error."
	g (NamePrefixDecl _ _) xs = case TermRep.fArgs xs of [ak,al] -> toDyn ((NamePrefixDecl (TermRep.fDyn ak) (TermRep.fDyn al))::Declaration) ; _ -> error "Term explosion error."
	g (NoLinesDecl _) xs = case TermRep.fArgs xs of [am] -> toDyn ((NoLinesDecl (TermRep.fDyn am))::Declaration) ; _ -> error "Term explosion error."
	g NonDetParserDecl xs = case TermRep.fArgs xs of [] -> toDyn ((NonDetParserDecl)::Declaration) ; _ -> error "Term explosion error."
	g (OutputDecl _) xs = case TermRep.fArgs xs of [an] -> toDyn ((OutputDecl (TermRep.fDyn an))::Declaration) ; _ -> error "Term explosion error."
	g (ParseParamDecl _) xs = case TermRep.fArgs xs of [ao] -> toDyn ((ParseParamDecl (TermRep.fDyn ao))::Declaration) ; _ -> error "Term explosion error."
	g (PureParserDecl _) xs = case TermRep.fArgs xs of [ap] -> toDyn ((PureParserDecl (TermRep.fDyn ap))::Declaration) ; _ -> error "Term explosion error."
	g (SkeletonDecl _) xs = case TermRep.fArgs xs of [aq] -> toDyn ((SkeletonDecl (TermRep.fDyn aq))::Declaration) ; _ -> error "Term explosion error."
	g (TokenTableDecl _) xs = case TermRep.fArgs xs of [ar] -> toDyn ((TokenTableDecl (TermRep.fDyn ar))::Declaration) ; _ -> error "Term explosion error."
	g VerboseDecl xs = case TermRep.fArgs xs of [] -> toDyn ((VerboseDecl)::Declaration) ; _ -> error "Term explosion error."
	g YaccDecl xs = case TermRep.fArgs xs of [] -> toDyn ((YaccDecl)::Declaration) ; _ -> error "Term explosion error."
	g SemiColon xs = case TermRep.fArgs xs of [] -> toDyn ((SemiColon)::Declaration) ; _ -> error "Term explosion error."

_tc_DeclarationTc = mkTyCon "Declaration"
instance Typeable Declaration where
    typeOf x = mkTyConApp _tc_DeclarationTc [ ]

instance Term GrammarDeclaration where
    explode (x::GrammarDeclaration) = TermRep (toDyn x, f x, g x) where
	f (LeftPriorDecl aa ab) = [explode aa,explode ab]
	f (RightPriorDecl ac ad) = [explode ac,explode ad]
	f (BinaryPriorDecl ae af) = [explode ae,explode af]
	f (NonAssocPriorDecl ag ah) = [explode ag,explode ah]
	f (NTermDecl ai) = [explode ai]
	f (TermDecl aj) = [explode aj]
	f (TokenDecl ak al) = [explode ak,explode al]
	f (TypeDecl am an) = [explode am,explode an]
	f (StartDecl ao) = [explode ao]
	f (UnionDecl ap) = [explode ap]
	f (DestructorDecl aq ar) = [explode aq,explode ar]
	f (PrinterDecl as at) = [explode as,explode at]
	f (DefaultPrecDecl au) = [explode au]
	f (NoDefaultPrecDecl av) = [explode av]
	g (LeftPriorDecl _ _) xs = case TermRep.fArgs xs of [aa,ab] -> toDyn ((LeftPriorDecl (TermRep.fDyn aa) (TermRep.fDyn ab))::GrammarDeclaration) ; _ -> error "Term explosion error."
	g (RightPriorDecl _ _) xs = case TermRep.fArgs xs of [ac,ad] -> toDyn ((RightPriorDecl (TermRep.fDyn ac) (TermRep.fDyn ad))::GrammarDeclaration) ; _ -> error "Term explosion error."
	g (BinaryPriorDecl _ _) xs = case TermRep.fArgs xs of [ae,af] -> toDyn ((BinaryPriorDecl (TermRep.fDyn ae) (TermRep.fDyn af))::GrammarDeclaration) ; _ -> error "Term explosion error."
	g (NonAssocPriorDecl _ _) xs = case TermRep.fArgs xs of [ag,ah] -> toDyn ((NonAssocPriorDecl (TermRep.fDyn ag) (TermRep.fDyn ah))::GrammarDeclaration) ; _ -> error "Term explosion error."
	g (NTermDecl _) xs = case TermRep.fArgs xs of [ai] -> toDyn ((NTermDecl (TermRep.fDyn ai))::GrammarDeclaration) ; _ -> error "Term explosion error."
	g (TermDecl _) xs = case TermRep.fArgs xs of [aj] -> toDyn ((TermDecl (TermRep.fDyn aj))::GrammarDeclaration) ; _ -> error "Term explosion error."
	g (TokenDecl _ _) xs = case TermRep.fArgs xs of [ak,al] -> toDyn ((TokenDecl (TermRep.fDyn ak) (TermRep.fDyn al))::GrammarDeclaration) ; _ -> error "Term explosion error."
	g (TypeDecl _ _) xs = case TermRep.fArgs xs of [am,an] -> toDyn ((TypeDecl (TermRep.fDyn am) (TermRep.fDyn an))::GrammarDeclaration) ; _ -> error "Term explosion error."
	g (StartDecl _) xs = case TermRep.fArgs xs of [ao] -> toDyn ((StartDecl (TermRep.fDyn ao))::GrammarDeclaration) ; _ -> error "Term explosion error."
	g (UnionDecl _) xs = case TermRep.fArgs xs of [ap] -> toDyn ((UnionDecl (TermRep.fDyn ap))::GrammarDeclaration) ; _ -> error "Term explosion error."
	g (DestructorDecl _ _) xs = case TermRep.fArgs xs of [aq,ar] -> toDyn ((DestructorDecl (TermRep.fDyn aq) (TermRep.fDyn ar))::GrammarDeclaration) ; _ -> error "Term explosion error."
	g (PrinterDecl _ _) xs = case TermRep.fArgs xs of [as,at] -> toDyn ((PrinterDecl (TermRep.fDyn as) (TermRep.fDyn at))::GrammarDeclaration) ; _ -> error "Term explosion error."
	g (DefaultPrecDecl _) xs = case TermRep.fArgs xs of [au] -> toDyn ((DefaultPrecDecl (TermRep.fDyn au))::GrammarDeclaration) ; _ -> error "Term explosion error."
	g (NoDefaultPrecDecl _) xs = case TermRep.fArgs xs of [av] -> toDyn ((NoDefaultPrecDecl (TermRep.fDyn av))::GrammarDeclaration) ; _ -> error "Term explosion error."

_tc_GrammarDeclarationTc = mkTyCon "GrammarDeclaration"
instance Typeable GrammarDeclaration where
    typeOf x = mkTyConApp _tc_GrammarDeclarationTc [ ]

instance Term Type where
    explode (x::Type) = TermRep (toDyn x, f x, g x) where
	f (Type aa) = [explode aa]
	g (Type _) xs = case TermRep.fArgs xs of [aa] -> toDyn ((Type (TermRep.fDyn aa))::Type) ; _ -> error "Term explosion error."

_tc_TypeTc = mkTyCon "Type"
instance Typeable Type where
    typeOf x = mkTyConApp _tc_TypeTc [ ]

instance Term SymbolDef where
    explode (x::SymbolDef) = TermRep (toDyn x, f x, g x) where
	f (TypeDef aa) = [explode aa]
	f (IdDef ab) = [explode ab]
	f (IdIntDef ac ad) = [explode ac,explode ad]
	f (IdStrLexDef ae af) = [explode ae,explode af]
	f (IdIntStrLexDef ag ah ai) = [explode ag,explode ah,explode ai]
	g (TypeDef _) xs = case TermRep.fArgs xs of [aa] -> toDyn ((TypeDef (TermRep.fDyn aa))::SymbolDef) ; _ -> error "Term explosion error."
	g (IdDef _) xs = case TermRep.fArgs xs of [ab] -> toDyn ((IdDef (TermRep.fDyn ab))::SymbolDef) ; _ -> error "Term explosion error."
	g (IdIntDef _ _) xs = case TermRep.fArgs xs of [ac,ad] -> toDyn ((IdIntDef (TermRep.fDyn ac) (TermRep.fDyn ad))::SymbolDef) ; _ -> error "Term explosion error."
	g (IdStrLexDef _ _) xs = case TermRep.fArgs xs of [ae,af] -> toDyn ((IdStrLexDef (TermRep.fDyn ae) (TermRep.fDyn af))::SymbolDef) ; _ -> error "Term explosion error."
	g (IdIntStrLexDef _ _ _) xs = case TermRep.fArgs xs of [ag,ah,ai] -> toDyn ((IdIntStrLexDef (TermRep.fDyn ag) (TermRep.fDyn ah) (TermRep.fDyn ai))::SymbolDef) ; _ -> error "Term explosion error."

_tc_SymbolDefTc = mkTyCon "SymbolDef"
instance Typeable SymbolDef where
    typeOf x = mkTyConApp _tc_SymbolDefTc [ ]

instance Term Grammar where
    explode (x::Grammar) = TermRep (toDyn x, f x, g x) where
	f (Grammar aa) = [explode aa]
	g (Grammar _) xs = case TermRep.fArgs xs of [aa] -> toDyn ((Grammar (TermRep.fDyn aa))::Grammar) ; _ -> error "Term explosion error."

_tc_GrammarTc = mkTyCon "Grammar"
instance Typeable Grammar where
    typeOf x = mkTyConApp _tc_GrammarTc [ ]

instance Term RulesOrGrammarDeclaration where
    explode (x::RulesOrGrammarDeclaration) = TermRep (toDyn x, f x, g x) where
	f (RulesOrGrammarDeclaration_1 aa) = [explode aa]
	f (RulesOrGrammarDeclaration_2 ab) = [explode ab]
	g (RulesOrGrammarDeclaration_1 _) xs = case TermRep.fArgs xs of [aa] -> toDyn ((RulesOrGrammarDeclaration_1 (TermRep.fDyn aa))::RulesOrGrammarDeclaration) ; _ -> error "Term explosion error."
	g (RulesOrGrammarDeclaration_2 _) xs = case TermRep.fArgs xs of [ab] -> toDyn ((RulesOrGrammarDeclaration_2 (TermRep.fDyn ab))::RulesOrGrammarDeclaration) ; _ -> error "Term explosion error."

_tc_RulesOrGrammarDeclarationTc = mkTyCon "RulesOrGrammarDeclaration"
instance Typeable RulesOrGrammarDeclaration where
    typeOf x = mkTyConApp _tc_RulesOrGrammarDeclarationTc [ ]

instance Term Rules where
    explode (x::Rules) = TermRep (toDyn x, f x, g x) where
	f (Rules aa ab) = [explode aa,explode ab]
	g (Rules _ _) xs = case TermRep.fArgs xs of [aa,ab] -> toDyn ((Rules (TermRep.fDyn aa) (TermRep.fDyn ab))::Rules) ; _ -> error "Term explosion error."

_tc_RulesTc = mkTyCon "Rules"
instance Typeable Rules where
    typeOf x = mkTyConApp _tc_RulesTc [ ]

instance Term Rhses where
    explode (x::Rhses) = TermRep (toDyn x, f x, g x) where
	f (Rhses_1 aa) = [explode aa]
	f (Rhses_2 ab ac) = [explode ab,explode ac]
	f (Rhses_3 ad) = [explode ad]
	g (Rhses_1 _) xs = case TermRep.fArgs xs of [aa] -> toDyn ((Rhses_1 (TermRep.fDyn aa))::Rhses) ; _ -> error "Term explosion error."
	g (Rhses_2 _ _) xs = case TermRep.fArgs xs of [ab,ac] -> toDyn ((Rhses_2 (TermRep.fDyn ab) (TermRep.fDyn ac))::Rhses) ; _ -> error "Term explosion error."
	g (Rhses_3 _) xs = case TermRep.fArgs xs of [ad] -> toDyn ((Rhses_3 (TermRep.fDyn ad))::Rhses) ; _ -> error "Term explosion error."

_tc_RhsesTc = mkTyCon "Rhses"
instance Typeable Rhses where
    typeOf x = mkTyConApp _tc_RhsesTc [ ]

instance Term Rhs where
    explode (x::Rhs) = TermRep (toDyn x, f x, g x) where
	f (Rhs aa) = [explode aa]
	g (Rhs _) xs = case TermRep.fArgs xs of [aa] -> toDyn ((Rhs (TermRep.fDyn aa))::Rhs) ; _ -> error "Term explosion error."

_tc_RhsTc = mkTyCon "Rhs"
instance Typeable Rhs where
    typeOf x = mkTyConApp _tc_RhsTc [ ]

instance Term RhsSymb where
    explode (x::RhsSymb) = TermRep (toDyn x, f x, g x) where
	f (Symb aa) = [explode aa]
	f (Code ab) = [explode ab]
	f (PrecDecl ac) = [explode ac]
	f (DPrecDecl ad) = [explode ad]
	f (MergeDecl ae) = [explode ae]
	g (Symb _) xs = case TermRep.fArgs xs of [aa] -> toDyn ((Symb (TermRep.fDyn aa))::RhsSymb) ; _ -> error "Term explosion error."
	g (Code _) xs = case TermRep.fArgs xs of [ab] -> toDyn ((Code (TermRep.fDyn ab))::RhsSymb) ; _ -> error "Term explosion error."
	g (PrecDecl _) xs = case TermRep.fArgs xs of [ac] -> toDyn ((PrecDecl (TermRep.fDyn ac))::RhsSymb) ; _ -> error "Term explosion error."
	g (DPrecDecl _) xs = case TermRep.fArgs xs of [ad] -> toDyn ((DPrecDecl (TermRep.fDyn ad))::RhsSymb) ; _ -> error "Term explosion error."
	g (MergeDecl _) xs = case TermRep.fArgs xs of [ae] -> toDyn ((MergeDecl (TermRep.fDyn ae))::RhsSymb) ; _ -> error "Term explosion error."

_tc_RhsSymbTc = mkTyCon "RhsSymb"
instance Typeable RhsSymb where
    typeOf x = mkTyConApp _tc_RhsSymbTc [ ]

instance Term Symbol where
    explode (x::Symbol) = TermRep (toDyn x, f x, g x) where
	f (SymbolId aa) = [explode aa]
	f (SymbolStrLex ab) = [explode ab]
	f (SymbolChar ac) = [explode ac]
	g (SymbolId _) xs = case TermRep.fArgs xs of [aa] -> toDyn ((SymbolId (TermRep.fDyn aa))::Symbol) ; _ -> error "Term explosion error."
	g (SymbolStrLex _) xs = case TermRep.fArgs xs of [ab] -> toDyn ((SymbolStrLex (TermRep.fDyn ab))::Symbol) ; _ -> error "Term explosion error."
	g (SymbolChar _) xs = case TermRep.fArgs xs of [ac] -> toDyn ((SymbolChar (TermRep.fDyn ac))::Symbol) ; _ -> error "Term explosion error."

_tc_SymbolTc = mkTyCon "Symbol"
instance Typeable Symbol where
    typeOf x = mkTyConApp _tc_SymbolTc [ ]

--  Imported from other files :-
