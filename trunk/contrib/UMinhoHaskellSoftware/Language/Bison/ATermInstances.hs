module Language.Bison.ATermInstances where

import Language.Bison.Syntax
import ATermLib

{- Generated by DrIFT (Automatic class derivations for Haskell) -}
{-# LINE 1 "Syntax.hs" #-}
{-* Generated by DrIFT : Look, but Don't Touch. *-}
instance ATermConvertible BisonSyntax where
    toATerm (BisonSyntax aa ab ac) = (AAppl "BisonSyntax" [ toATerm aa,toATerm ab,toATerm ac ])
    fromATerm (AAppl "BisonSyntax" [ aa,ab,ac ]) = let aa' = fromATerm aa
						       ab' = fromATerm ab
						       ac' = fromATerm ac in (BisonSyntax aa' ab' ac')
    fromATerm u = fromATermError "BisonSyntax" u

instance ATermConvertible Declaration where
    toATerm (GrammarDecl aa) = (AAppl "GrammarDecl" [ toATerm aa ])
    toATerm (PrologueDecl aa) = (AAppl "PrologueDecl" [ toATerm aa ])
    toATerm DebugDecl = (AAppl "DebugDecl" [ ])
    toATerm (DefineDecl aa ab) = (AAppl "DefineDecl" [ toATerm aa,toATerm ab ])
    toATerm DefinesDecl = (AAppl "DefinesDecl" [ ])
    toATerm ErrorVerboseDecl = (AAppl "ErrorVerboseDecl" [ ])
    toATerm (ExpectDecl aa) = (AAppl "ExpectDecl" [ toATerm aa ])
    toATerm (ExpectRRDecl aa ab) = (AAppl "ExpectRRDecl" [ toATerm aa,toATerm ab ])
    toATerm (FilePrefixDecl aa) = (AAppl "FilePrefixDecl" [ toATerm aa ])
    toATerm GlrParserDecl = (AAppl "GlrParserDecl" [ ])
    toATerm (InitialActionDecl aa) = (AAppl "InitialActionDecl" [ toATerm aa ])
    toATerm (LexParamDecl aa) = (AAppl "LexParamDecl" [ toATerm aa ])
    toATerm LocationsDecl = (AAppl "LocationsDecl" [ ])
    toATerm (NamePrefixDecl aa ab) = (AAppl "NamePrefixDecl" [ toATerm aa,toATerm ab ])
    toATerm (NoLinesDecl aa) = (AAppl "NoLinesDecl" [ toATerm aa ])
    toATerm NonDetParserDecl = (AAppl "NonDetParserDecl" [ ])
    toATerm (OutputDecl aa) = (AAppl "OutputDecl" [ toATerm aa ])
    toATerm (ParseParamDecl aa) = (AAppl "ParseParamDecl" [ toATerm aa ])
    toATerm (PureParserDecl aa) = (AAppl "PureParserDecl" [ toATerm aa ])
    toATerm (SkeletonDecl aa) = (AAppl "SkeletonDecl" [ toATerm aa ])
    toATerm (TokenTableDecl aa) = (AAppl "TokenTableDecl" [ toATerm aa ])
    toATerm VerboseDecl = (AAppl "VerboseDecl" [ ])
    toATerm YaccDecl = (AAppl "YaccDecl" [ ])
    toATerm SemiColon = (AAppl "SemiColon" [ ])
    fromATerm (AAppl "GrammarDecl" [ aa ]) = let aa' = fromATerm aa in (GrammarDecl aa')
    fromATerm (AAppl "PrologueDecl" [ aa ]) = let aa' = fromATerm aa in (PrologueDecl aa')
    fromATerm (AAppl "DebugDecl" [ ]) = let in DebugDecl
    fromATerm (AAppl "DefineDecl" [ aa,ab ]) = let aa' = fromATerm aa
						   ab' = fromATerm ab in (DefineDecl aa' ab')
    fromATerm (AAppl "DefinesDecl" [ ]) = let in DefinesDecl
    fromATerm (AAppl "ErrorVerboseDecl" [ ]) = let in ErrorVerboseDecl
    fromATerm (AAppl "ExpectDecl" [ aa ]) = let aa' = fromATerm aa in (ExpectDecl aa')
    fromATerm (AAppl "ExpectRRDecl" [ aa,ab ]) = let aa' = fromATerm aa
						     ab' = fromATerm ab in (ExpectRRDecl aa' ab')
    fromATerm (AAppl "FilePrefixDecl" [ aa ]) = let aa' = fromATerm aa in (FilePrefixDecl aa')
    fromATerm (AAppl "GlrParserDecl" [ ]) = let in GlrParserDecl
    fromATerm (AAppl "InitialActionDecl" [ aa ]) = let aa' = fromATerm aa in (InitialActionDecl aa')
    fromATerm (AAppl "LexParamDecl" [ aa ]) = let aa' = fromATerm aa in (LexParamDecl aa')
    fromATerm (AAppl "LocationsDecl" [ ]) = let in LocationsDecl
    fromATerm (AAppl "NamePrefixDecl" [ aa,ab ]) = let aa' = fromATerm aa
						       ab' = fromATerm ab in (NamePrefixDecl aa' ab')
    fromATerm (AAppl "NoLinesDecl" [ aa ]) = let aa' = fromATerm aa in (NoLinesDecl aa')
    fromATerm (AAppl "NonDetParserDecl" [ ]) = let in NonDetParserDecl
    fromATerm (AAppl "OutputDecl" [ aa ]) = let aa' = fromATerm aa in (OutputDecl aa')
    fromATerm (AAppl "ParseParamDecl" [ aa ]) = let aa' = fromATerm aa in (ParseParamDecl aa')
    fromATerm (AAppl "PureParserDecl" [ aa ]) = let aa' = fromATerm aa in (PureParserDecl aa')
    fromATerm (AAppl "SkeletonDecl" [ aa ]) = let aa' = fromATerm aa in (SkeletonDecl aa')
    fromATerm (AAppl "TokenTableDecl" [ aa ]) = let aa' = fromATerm aa in (TokenTableDecl aa')
    fromATerm (AAppl "VerboseDecl" [ ]) = let in VerboseDecl
    fromATerm (AAppl "YaccDecl" [ ]) = let in YaccDecl
    fromATerm (AAppl "SemiColon" [ ]) = let in SemiColon
    fromATerm u = fromATermError "Declaration" u

instance ATermConvertible GrammarDeclaration where
    toATerm (LeftPriorDecl aa ab) = (AAppl "LeftPriorDecl" [ toATerm aa,toATerm ab ])
    toATerm (RightPriorDecl aa ab) = (AAppl "RightPriorDecl" [ toATerm aa,toATerm ab ])
    toATerm (BinaryPriorDecl aa ab) = (AAppl "BinaryPriorDecl" [ toATerm aa,toATerm ab ])
    toATerm (NonAssocPriorDecl aa ab) = (AAppl "NonAssocPriorDecl" [ toATerm aa,toATerm ab ])
    toATerm (NTermDecl aa) = (AAppl "NTermDecl" [ toATerm aa ])
    toATerm (TermDecl aa) = (AAppl "TermDecl" [ toATerm aa ])
    toATerm (TokenDecl aa ab) = (AAppl "TokenDecl" [ toATerm aa,toATerm ab ])
    toATerm (TypeDecl aa ab) = (AAppl "TypeDecl" [ toATerm aa,toATerm ab ])
    toATerm (StartDecl aa) = (AAppl "StartDecl" [ toATerm aa ])
    toATerm (UnionDecl aa) = (AAppl "UnionDecl" [ toATerm aa ])
    toATerm (DestructorDecl aa ab) = (AAppl "DestructorDecl" [ toATerm aa,toATerm ab ])
    toATerm (PrinterDecl aa ab) = (AAppl "PrinterDecl" [ toATerm aa,toATerm ab ])
    toATerm (DefaultPrecDecl aa) = (AAppl "DefaultPrecDecl" [ toATerm aa ])
    toATerm (NoDefaultPrecDecl aa) = (AAppl "NoDefaultPrecDecl" [ toATerm aa ])
    fromATerm (AAppl "LeftPriorDecl" [ aa,ab ]) = let aa' = fromATerm aa
						      ab' = fromATerm ab in (LeftPriorDecl aa' ab')
    fromATerm (AAppl "RightPriorDecl" [ aa,ab ]) = let aa' = fromATerm aa
						       ab' = fromATerm ab in (RightPriorDecl aa' ab')
    fromATerm (AAppl "BinaryPriorDecl" [ aa,ab ]) = let aa' = fromATerm aa
							ab' = fromATerm ab in (BinaryPriorDecl aa' ab')
    fromATerm (AAppl "NonAssocPriorDecl" [ aa,ab ]) = let aa' = fromATerm aa
							  ab' = fromATerm ab in (NonAssocPriorDecl aa' ab')
    fromATerm (AAppl "NTermDecl" [ aa ]) = let aa' = fromATerm aa in (NTermDecl aa')
    fromATerm (AAppl "TermDecl" [ aa ]) = let aa' = fromATerm aa in (TermDecl aa')
    fromATerm (AAppl "TokenDecl" [ aa,ab ]) = let aa' = fromATerm aa
						  ab' = fromATerm ab in (TokenDecl aa' ab')
    fromATerm (AAppl "TypeDecl" [ aa,ab ]) = let aa' = fromATerm aa
						 ab' = fromATerm ab in (TypeDecl aa' ab')
    fromATerm (AAppl "StartDecl" [ aa ]) = let aa' = fromATerm aa in (StartDecl aa')
    fromATerm (AAppl "UnionDecl" [ aa ]) = let aa' = fromATerm aa in (UnionDecl aa')
    fromATerm (AAppl "DestructorDecl" [ aa,ab ]) = let aa' = fromATerm aa
						       ab' = fromATerm ab in (DestructorDecl aa' ab')
    fromATerm (AAppl "PrinterDecl" [ aa,ab ]) = let aa' = fromATerm aa
						    ab' = fromATerm ab in (PrinterDecl aa' ab')
    fromATerm (AAppl "DefaultPrecDecl" [ aa ]) = let aa' = fromATerm aa in (DefaultPrecDecl aa')
    fromATerm (AAppl "NoDefaultPrecDecl" [ aa ]) = let aa' = fromATerm aa in (NoDefaultPrecDecl aa')
    fromATerm u = fromATermError "GrammarDeclaration" u

instance ATermConvertible Type where
    toATerm (Type aa) = (AAppl "Type" [ toATerm aa ])
    fromATerm (AAppl "Type" [ aa ]) = let aa' = fromATerm aa in (Type aa')
    fromATerm u = fromATermError "Type" u

instance ATermConvertible SymbolDef where
    toATerm (TypeDef aa) = (AAppl "TypeDef" [ toATerm aa ])
    toATerm (IdDef aa) = (AAppl "IdDef" [ toATerm aa ])
    toATerm (IdIntDef aa ab) = (AAppl "IdIntDef" [ toATerm aa,toATerm ab ])
    toATerm (IdStrLexDef aa ab) = (AAppl "IdStrLexDef" [ toATerm aa,toATerm ab ])
    toATerm (IdIntStrLexDef aa ab ac) = (AAppl "IdIntStrLexDef" [ toATerm aa,toATerm ab,toATerm ac ])
    fromATerm (AAppl "TypeDef" [ aa ]) = let aa' = fromATerm aa in (TypeDef aa')
    fromATerm (AAppl "IdDef" [ aa ]) = let aa' = fromATerm aa in (IdDef aa')
    fromATerm (AAppl "IdIntDef" [ aa,ab ]) = let aa' = fromATerm aa
						 ab' = fromATerm ab in (IdIntDef aa' ab')
    fromATerm (AAppl "IdStrLexDef" [ aa,ab ]) = let aa' = fromATerm aa
						    ab' = fromATerm ab in (IdStrLexDef aa' ab')
    fromATerm (AAppl "IdIntStrLexDef" [ aa,ab,ac ]) = let aa' = fromATerm aa
							  ab' = fromATerm ab
							  ac' = fromATerm ac in (IdIntStrLexDef aa' ab' ac')
    fromATerm u = fromATermError "SymbolDef" u

instance ATermConvertible Grammar where
    toATerm (Grammar aa) = (AAppl "Grammar" [ toATerm aa ])
    fromATerm (AAppl "Grammar" [ aa ]) = let aa' = fromATerm aa in (Grammar aa')
    fromATerm u = fromATermError "Grammar" u

instance ATermConvertible RulesOrGrammarDeclaration where
    toATerm (RulesOrGrammarDeclaration_1 aa) = (AAppl "RulesOrGrammarDeclaration_1" [ toATerm aa ])
    toATerm (RulesOrGrammarDeclaration_2 aa) = (AAppl "RulesOrGrammarDeclaration_2" [ toATerm aa ])
    fromATerm (AAppl "RulesOrGrammarDeclaration_1" [ aa ]) = let aa' = fromATerm aa in (RulesOrGrammarDeclaration_1 aa')
    fromATerm (AAppl "RulesOrGrammarDeclaration_2" [ aa ]) = let aa' = fromATerm aa in (RulesOrGrammarDeclaration_2 aa')
    fromATerm u = fromATermError "RulesOrGrammarDeclaration" u

instance ATermConvertible Rules where
    toATerm (Rules aa ab) = (AAppl "Rules" [ toATerm aa,toATerm ab ])
    fromATerm (AAppl "Rules" [ aa,ab ]) = let aa' = fromATerm aa
					      ab' = fromATerm ab in (Rules aa' ab')
    fromATerm u = fromATermError "Rules" u

instance ATermConvertible Rhses where
    toATerm (Rhses_1 aa) = (AAppl "Rhses_1" [ toATerm aa ])
    toATerm (Rhses_2 aa ab) = (AAppl "Rhses_2" [ toATerm aa,toATerm ab ])
    toATerm (Rhses_3 aa) = (AAppl "Rhses_3" [ toATerm aa ])
    fromATerm (AAppl "Rhses_1" [ aa ]) = let aa' = fromATerm aa in (Rhses_1 aa')
    fromATerm (AAppl "Rhses_2" [ aa,ab ]) = let aa' = fromATerm aa
						ab' = fromATerm ab in (Rhses_2 aa' ab')
    fromATerm (AAppl "Rhses_3" [ aa ]) = let aa' = fromATerm aa in (Rhses_3 aa')
    fromATerm u = fromATermError "Rhses" u

instance ATermConvertible Rhs where
    toATerm (Rhs aa) = (AAppl "Rhs" [ toATerm aa ])
    fromATerm (AAppl "Rhs" [ aa ]) = let aa' = fromATerm aa in (Rhs aa')
    fromATerm u = fromATermError "Rhs" u

instance ATermConvertible RhsSymb where
    toATerm (Symb aa) = (AAppl "Symb" [ toATerm aa ])
    toATerm (Code aa) = (AAppl "Code" [ toATerm aa ])
    toATerm (PrecDecl aa) = (AAppl "PrecDecl" [ toATerm aa ])
    toATerm (DPrecDecl aa) = (AAppl "DPrecDecl" [ toATerm aa ])
    toATerm (MergeDecl aa) = (AAppl "MergeDecl" [ toATerm aa ])
    fromATerm (AAppl "Symb" [ aa ]) = let aa' = fromATerm aa in (Symb aa')
    fromATerm (AAppl "Code" [ aa ]) = let aa' = fromATerm aa in (Code aa')
    fromATerm (AAppl "PrecDecl" [ aa ]) = let aa' = fromATerm aa in (PrecDecl aa')
    fromATerm (AAppl "DPrecDecl" [ aa ]) = let aa' = fromATerm aa in (DPrecDecl aa')
    fromATerm (AAppl "MergeDecl" [ aa ]) = let aa' = fromATerm aa in (MergeDecl aa')
    fromATerm u = fromATermError "RhsSymb" u

instance ATermConvertible Symbol where
    toATerm (SymbolId aa) = (AAppl "SymbolId" [ toATerm aa ])
    toATerm (SymbolStrLex aa) = (AAppl "SymbolStrLex" [ toATerm aa ])
    toATerm (SymbolChar aa) = (AAppl "SymbolChar" [ toATerm aa ])
    fromATerm (AAppl "SymbolId" [ aa ]) = let aa' = fromATerm aa in (SymbolId aa')
    fromATerm (AAppl "SymbolStrLex" [ aa ]) = let aa' = fromATerm aa in (SymbolStrLex aa')
    fromATerm (AAppl "SymbolChar" [ aa ]) = let aa' = fromATerm aa in (SymbolChar aa')
    fromATerm u = fromATermError "Symbol" u

--  Imported from other files :-
