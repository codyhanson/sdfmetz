module Language.Antlr.ReadInstances where

import Language.Antlr.Syntax

{- Generated by DrIFT (Automatic class derivations for Haskell) -}
{-# LINE 1 "Syntax.hs" #-}
{-* Generated by DrIFT : Look, but Don't Touch. *-}
instance Read GrammarHeader where
    readsPrec d input =
	      readParen (d > 9)
	      (\ inp ->
	       [((GrammarHeader aa ab) , rest) |
		("GrammarHeader" , inp) <- lex inp
		, (aa , inp) <- readsPrec 10 inp ,
		(ab , rest) <- readsPrec 10 inp])
	      input

instance Read Grammar where
    readsPrec d input =
	      readParen (d > 9)
	      (\ inp ->
	       [((Grammar aa ab ac) , rest) | ("Grammar" , inp) <- lex inp ,
		(aa , inp) <- readsPrec 10 inp , (ab , inp) <- readsPrec 10 inp ,
		(ac , rest) <- readsPrec 10 inp])
	      input

instance Read ClassDef where
    readsPrec d input =
	      readParen (d > 9)
	      (\ inp ->
	       [((ClassDef aa ab ac ad) , rest) | ("ClassDef" , inp) <- lex inp ,
		(aa , inp) <- readsPrec 10 inp , (ab , inp) <- readsPrec 10 inp ,
		(ac , inp) <- readsPrec 10 inp , (ad , rest) <- readsPrec 10 inp])
	      input

instance Read OptionAssignmentSemi where
    readsPrec d input =
	      readParen (d > 9)
	      (\ inp ->
	       [((OptionAssignmentSemi aa ab) , rest) |
		("OptionAssignmentSemi" , inp) <- lex inp
		, (aa , inp) <- readsPrec 10 inp ,
		(ab , rest) <- readsPrec 10 inp])
	      input

instance Read OptionAssignment where
    readsPrec d input =
	      readParen (d > 9)
	      (\ inp ->
	       [((OptionAssignment aa ab) , rest) |
		("OptionAssignment" , inp) <- lex inp
		, (aa , inp) <- readsPrec 10 inp ,
		(ab , rest) <- readsPrec 10 inp])
	      input

instance Read OptionsSpec where
    readsPrec d input =
	      readParen (d > 9)
	      (\ inp ->
	       [((OptionsSpec aa) , rest) | ("OptionsSpec" , inp) <- lex inp ,
		(aa , rest) <- readsPrec 10 inp])
	      input

instance Read SingleOptionSpec where
    readsPrec d input =
	      readParen (d > 9)
	      (\ inp ->
	       [((LexOption aa) , rest) | ("LexOption" , inp) <- lex inp ,
		(aa , rest) <- readsPrec 10 inp])
	      input
	      ++
	      readParen (d > 9)
	      (\ inp ->
	       [((Option aa ab) , rest) | ("Option" , inp) <- lex inp ,
		(aa , inp) <- readsPrec 10 inp , (ab , rest) <- readsPrec 10 inp])
	      input

instance Read LexerOptionsSpec where
    readsPrec d input =
	      readParen (d > 9)
	      (\ inp ->
	       [((LexerOptionsSpec aa) , rest) |
		("LexerOptionsSpec" , inp) <- lex inp
		, (aa , rest) <- readsPrec 10 inp])
	      input

instance Read OptionValue where
    readsPrec d input =
	      readParen (d > 9)
	      (\ inp ->
	       [((IdValue aa) , rest) | ("IdValue" , inp) <- lex inp ,
		(aa , rest) <- readsPrec 10 inp])
	      input
	      ++
	      readParen (d > 9)
	      (\ inp ->
	       [((StringValue aa) , rest) | ("StringValue" , inp) <- lex inp ,
		(aa , rest) <- readsPrec 10 inp])
	      input
	      ++
	      readParen (d > 9)
	      (\ inp ->
	       [((CharValue aa) , rest) | ("CharValue" , inp) <- lex inp ,
		(aa , rest) <- readsPrec 10 inp])
	      input
	      ++
	      readParen (d > 9)
	      (\ inp ->
	       [((IntValue aa) , rest) | ("IntValue" , inp) <- lex inp ,
		(aa , rest) <- readsPrec 10 inp])
	      input

instance Read CharSet where
    readsPrec d input =
	      readParen (d > 9)
	      (\ inp ->
	       [((CharSet aa) , rest) | ("CharSet" , inp) <- lex inp ,
		(aa , rest) <- readsPrec 10 inp])
	      input

instance Read SetBlockElement where
    readsPrec d input =
	      readParen (d > 9)
	      (\ inp ->
	       [((SetBlockElement aa ab) , rest) |
		("SetBlockElement" , inp) <- lex inp
		, (aa , inp) <- readsPrec 10 inp ,
		(ab , rest) <- readsPrec 10 inp])
	      input

instance Read SingleTokenSpec where
    readsPrec d input =
	      readParen (d > 9)
	      (\ inp ->
	       [((TokenRefSpec aa ab ac) , rest) |
		("TokenRefSpec" , inp) <- lex inp
		, (aa , inp) <- readsPrec 10 inp , (ab , inp) <- readsPrec 10 inp ,
		(ac , rest) <- readsPrec 10 inp])
	      input
	      ++
	      readParen (d > 9)
	      (\ inp ->
	       [((StringLitTokenSpec aa ab) , rest) |
		("StringLitTokenSpec" , inp) <- lex inp
		, (aa , inp) <- readsPrec 10 inp ,
		(ab , rest) <- readsPrec 10 inp])
	      input

instance Read TokensSpec where
    readsPrec d input =
	      readParen (d > 9)
	      (\ inp ->
	       [((TokensSpec aa) , rest) | ("TokensSpec" , inp) <- lex inp ,
		(aa , rest) <- readsPrec 10 inp])
	      input

instance Read TokensSpecOptions where
    readsPrec d input =
	      readParen (d > 9)
	      (\ inp ->
	       [((TokensSpecOptions aa) , rest) |
		("TokensSpecOptions" , inp) <- lex inp
		, (aa , rest) <- readsPrec 10 inp])
	      input

instance Read SuperClass where
    readsPrec d input =
	      readParen (d > 9)
	      (\ inp ->
	       [((SuperClass aa) , rest) | ("SuperClass" , inp) <- lex inp ,
		(aa , rest) <- readsPrec 10 inp])
	      input

instance Read ClassHeader where
    readsPrec d input =
	      readParen (d > 9)
	      (\ inp ->
	       [((LexClassHeader aa) , rest) | ("LexClassHeader" , inp) <- lex inp
		, (aa , rest) <- readsPrec 10 inp])
	      input
	      ++
	      readParen (d > 9)
	      (\ inp ->
	       [((ClassHeader aa ab ac) , rest) | ("ClassHeader" , inp) <- lex inp
		, (aa , inp) <- readsPrec 10 inp , (ab , inp) <- readsPrec 10 inp ,
		(ac , rest) <- readsPrec 10 inp])
	      input

instance Read Spec where
    readsPrec d input =
	      readParen (d > 9)
	      (\ inp ->
	       [((Spec aa ab ac ad) , rest) | ("Spec" , inp) <- lex inp ,
		(aa , inp) <- readsPrec 10 inp , (ab , inp) <- readsPrec 10 inp ,
		(ac , inp) <- readsPrec 10 inp , (ad , rest) <- readsPrec 10 inp])
	      input

instance Read Rule where
    readsPrec d input =
	      readParen (d > 9)
	      (\ inp ->
	       [((Rule aa ab ac ad ae af ag ah ai aj ak) , rest) |
		("Rule" , inp) <- lex inp
		, (aa , inp) <- readsPrec 10 inp , (ab , inp) <- readsPrec 10 inp ,
		(ac , inp) <- readsPrec 10 inp , (ad , inp) <- readsPrec 10 inp ,
		(ae , inp) <- readsPrec 10 inp , (af , inp) <- readsPrec 10 inp ,
		(ag , inp) <- readsPrec 10 inp , (ah , inp) <- readsPrec 10 inp ,
		(ai , inp) <- readsPrec 10 inp , (aj , inp) <- readsPrec 10 inp ,
		(ak , rest) <- readsPrec 10 inp])
	      input

instance Read ThrowsSpec where
    readsPrec d input =
	      readParen (d > 9)
	      (\ inp ->
	       [((ThrowsSpec aa) , rest) | ("ThrowsSpec" , inp) <- lex inp ,
		(aa , rest) <- readsPrec 10 inp])
	      input

instance Read Block where
    readsPrec d input =
	      readParen (d > 9)
	      (\ inp ->
	       [((Block aa) , rest) | ("Block" , inp) <- lex inp ,
		(aa , rest) <- readsPrec 10 inp])
	      input

instance Read Alternative where
    readsPrec d input =
	      readParen (d > 9)
	      (\ inp ->
	       [((Alternative aa ab ac) , rest) | ("Alternative" , inp) <- lex inp
		, (aa , inp) <- readsPrec 10 inp , (ab , inp) <- readsPrec 10 inp ,
		(ac , rest) <- readsPrec 10 inp])
	      input

instance Read ExceptionSpec where
    readsPrec d input =
	      readParen (d > 9)
	      (\ inp ->
	       [((ExceptionSpec aa ab) , rest) |
		("ExceptionSpec" , inp) <- lex inp
		, (aa , inp) <- readsPrec 10 inp ,
		(ab , rest) <- readsPrec 10 inp])
	      input

instance Read ExceptionSpecNoLabel where
    readsPrec d input =
	      readParen (d > 9)
	      (\ inp ->
	       [((ExceptionSpecNoLabel aa) , rest) |
		("ExceptionSpecNoLabel" , inp) <- lex inp
		, (aa , rest) <- readsPrec 10 inp])
	      input

instance Read ExceptionHandler where
    readsPrec d input =
	      readParen (d > 9)
	      (\ inp ->
	       [((ExceptionHandler aa ab) , rest) |
		("ExceptionHandler" , inp) <- lex inp
		, (aa , inp) <- readsPrec 10 inp ,
		(ab , rest) <- readsPrec 10 inp])
	      input

instance Read Element where
    readsPrec d input =
	      readParen (d > 9)
	      (\ inp ->
	       [((Element aa ab) , rest) | ("Element" , inp) <- lex inp ,
		(aa , inp) <- readsPrec 10 inp , (ab , rest) <- readsPrec 10 inp])
	      input

instance Read ElementOptionSpec where
    readsPrec d input =
	      readParen (d > 9)
	      (\ inp ->
	       [((ElementOptionSpec aa) , rest) |
		("ElementOptionSpec" , inp) <- lex inp
		, (aa , rest) <- readsPrec 10 inp])
	      input

instance Read AssignElementBody where
    readsPrec d input =
	      readParen (d > 9)
	      (\ inp ->
	       [((RuleRefElt aa ab ac) , rest) | ("RuleRefElt" , inp) <- lex inp ,
		(aa , inp) <- readsPrec 10 inp , (ab , inp) <- readsPrec 10 inp ,
		(ac , rest) <- readsPrec 10 inp])
	      input
	      ++
	      readParen (d > 9)
	      (\ inp ->
	       [((TokenRefElt aa ab) , rest) | ("TokenRefElt" , inp) <- lex inp ,
		(aa , inp) <- readsPrec 10 inp , (ab , rest) <- readsPrec 10 inp])
	      input

instance Read NegatedElement where
    readsPrec d input =
	      readParen (d > 9)
	      (\ inp ->
	       [((NegatedNotTerminal aa) , rest) |
		("NegatedNotTerminal" , inp) <- lex inp
		, (aa , rest) <- readsPrec 10 inp])
	      input
	      ++
	      readParen (d > 9)
	      (\ inp ->
	       [((NegatedEbnf aa) , rest) | ("NegatedEbnf" , inp) <- lex inp ,
		(aa , rest) <- readsPrec 10 inp])
	      input

instance Read NoAssignElementBody where
    readsPrec d input =
	      readParen (d > 9)
	      (\ inp ->
	       [((RuleRefEltNoAssign aa ab ac) , rest) |
		("RuleRefEltNoAssign" , inp) <- lex inp
		, (aa , inp) <- readsPrec 10 inp , (ab , inp) <- readsPrec 10 inp ,
		(ac , rest) <- readsPrec 10 inp])
	      input
	      ++
	      readParen (d > 9)
	      (\ inp ->
	       [((RangeElt aa) , rest) | ("RangeElt" , inp) <- lex inp ,
		(aa , rest) <- readsPrec 10 inp])
	      input
	      ++
	      readParen (d > 9)
	      (\ inp ->
	       [((TerminalElt aa) , rest) | ("TerminalElt" , inp) <- lex inp ,
		(aa , rest) <- readsPrec 10 inp])
	      input
	      ++
	      readParen (d > 9)
	      (\ inp ->
	       [((NegatedElt aa) , rest) | ("NegatedElt" , inp) <- lex inp ,
		(aa , rest) <- readsPrec 10 inp])
	      input
	      ++
	      readParen (d > 9)
	      (\ inp ->
	       [((EbnfElt aa) , rest) | ("EbnfElt" , inp) <- lex inp ,
		(aa , rest) <- readsPrec 10 inp])
	      input

instance Read ElementNoOptionSpec where
    readsPrec d input =
	      readParen (d > 9)
	      (\ inp ->
	       [((AssignElement aa ab ac) , rest) |
		("AssignElement" , inp) <- lex inp
		, (aa , inp) <- readsPrec 10 inp , (ab , inp) <- readsPrec 10 inp ,
		(ac , rest) <- readsPrec 10 inp])
	      input
	      ++
	      readParen (d > 9)
	      (\ inp ->
	       [((NoAssignElement aa ab) , rest) |
		("NoAssignElement" , inp) <- lex inp
		, (aa , inp) <- readsPrec 10 inp ,
		(ab , rest) <- readsPrec 10 inp])
	      input
	      ++
	      readParen (d > 9)
	      (\ inp ->
	       [((ActionElement aa) , rest) | ("ActionElement" , inp) <- lex inp ,
		(aa , rest) <- readsPrec 10 inp])
	      input
	      ++
	      readParen (d > 9)
	      (\ inp ->
	       [((SemPredElement aa) , rest) | ("SemPredElement" , inp) <- lex inp
		, (aa , rest) <- readsPrec 10 inp])
	      input
	      ++
	      readParen (d > 9)
	      (\ inp ->
	       [((TreeElement aa) , rest) | ("TreeElement" , inp) <- lex inp ,
		(aa , rest) <- readsPrec 10 inp])
	      input

instance Read Tree where
    readsPrec d input =
	      readParen (d > 9)
	      (\ inp ->
	       [((Tree aa ab) , rest) | ("Tree" , inp) <- lex inp ,
		(aa , inp) <- readsPrec 10 inp , (ab , rest) <- readsPrec 10 inp])
	      input

instance Read RootNode where
    readsPrec d input =
	      readParen (d > 9)
	      (\ inp ->
	       [((RootNode aa ab) , rest) | ("RootNode" , inp) <- lex inp ,
		(aa , inp) <- readsPrec 10 inp , (ab , rest) <- readsPrec 10 inp])
	      input

instance Read OptionsSpecOrAction where
    readsPrec d input =
	      readParen (d > 9)
	      (\ inp ->
	       [((OptionsSpecAndMaybeAction aa ab) , rest) |
		("OptionsSpecAndMaybeAction" , inp) <- lex inp
		, (aa , inp) <- readsPrec 10 inp ,
		(ab , rest) <- readsPrec 10 inp])
	      input
	      ++
	      readParen (d > 9)
	      (\ inp ->
	       [((Action aa) , rest) | ("Action" , inp) <- lex inp ,
		(aa , rest) <- readsPrec 10 inp])
	      input

instance Read RegExpOperator where
    readsPrec d input =
	      readParen (d > 9)
	      (\ inp ->
	       [((Question aa) , rest) | ("Question" , inp) <- lex inp ,
		(aa , rest) <- readsPrec 10 inp])
	      input
	      ++
	      readParen (d > 9)
	      (\ inp ->
	       [((Star aa) , rest) | ("Star" , inp) <- lex inp ,
		(aa , rest) <- readsPrec 10 inp])
	      input
	      ++
	      readParen (d > 9)
	      (\ inp ->
	       [((Plus aa) , rest) | ("Plus" , inp) <- lex inp ,
		(aa , rest) <- readsPrec 10 inp])
	      input

instance Read EbnfBody where
    readsPrec d input =
	      readParen (d > 9)
	      (\ inp ->
	       [((EbnfBodyRegExp aa ab) , rest) |
		("EbnfBodyRegExp" , inp) <- lex inp
		, (aa , inp) <- readsPrec 10 inp ,
		(ab , rest) <- readsPrec 10 inp])
	      input
	      ++
	      readParen (d > 9)
	      (\ inp ->
	       [((EbnfBodyImplies aa) , rest) |
		("EbnfBodyImplies" , inp) <- lex inp
		, (aa , rest) <- readsPrec 10 inp])
	      input

instance Read Ebnf where
    readsPrec d input =
	      readParen (d > 9)
	      (\ inp ->
	       [((Ebnf aa ab ac) , rest) | ("Ebnf" , inp) <- lex inp ,
		(aa , inp) <- readsPrec 10 inp , (ab , inp) <- readsPrec 10 inp ,
		(ac , rest) <- readsPrec 10 inp])
	      input

instance Read Ast_type_spec where
    readsPrec d input =
	      readParen (d > 9)
	      (\ inp ->
	       [((CaretAstType aa) , rest) | ("CaretAstType" , inp) <- lex inp ,
		(aa , rest) <- readsPrec 10 inp])
	      input
	      ++
	      readParen (d > 9)
	      (\ inp ->
	       [((BangAstType aa) , rest) | ("BangAstType" , inp) <- lex inp ,
		(aa , rest) <- readsPrec 10 inp])
	      input
	      ++
	      (\ inp -> [((NoAstType) , rest) | ("NoAstType" , rest) <- lex inp])
	      input

instance Read TokenRefOrStringLit where
    readsPrec d input =
	      readParen (d > 9)
	      (\ inp ->
	       [((TokenRef aa) , rest) | ("TokenRef" , inp) <- lex inp ,
		(aa , rest) <- readsPrec 10 inp])
	      input
	      ++
	      readParen (d > 9)
	      (\ inp ->
	       [((StringLit aa) , rest) | ("StringLit" , inp) <- lex inp ,
		(aa , rest) <- readsPrec 10 inp])
	      input

instance Read Range where
    readsPrec d input =
	      readParen (d > 9)
	      (\ inp ->
	       [((CharRange aa ab ac) , rest) | ("CharRange" , inp) <- lex inp ,
		(aa , inp) <- readsPrec 10 inp , (ab , inp) <- readsPrec 10 inp ,
		(ac , rest) <- readsPrec 10 inp])
	      input
	      ++
	      readParen (d > 9)
	      (\ inp ->
	       [((StringTokenRange aa ab ac) , rest) |
		("StringTokenRange" , inp) <- lex inp
		, (aa , inp) <- readsPrec 10 inp , (ab , inp) <- readsPrec 10 inp ,
		(ac , rest) <- readsPrec 10 inp])
	      input

instance Read Terminal where
    readsPrec d input =
	      readParen (d > 9)
	      (\ inp ->
	       [((CharLiteralT aa ab) , rest) | ("CharLiteralT" , inp) <- lex inp
		, (aa , inp) <- readsPrec 10 inp ,
		(ab , rest) <- readsPrec 10 inp])
	      input
	      ++
	      readParen (d > 9)
	      (\ inp ->
	       [((TokenRefT aa ab ac) , rest) | ("TokenRefT" , inp) <- lex inp ,
		(aa , inp) <- readsPrec 10 inp , (ab , inp) <- readsPrec 10 inp ,
		(ac , rest) <- readsPrec 10 inp])
	      input
	      ++
	      readParen (d > 9)
	      (\ inp ->
	       [((StringLiteralT aa ab) , rest) |
		("StringLiteralT" , inp) <- lex inp
		, (aa , inp) <- readsPrec 10 inp ,
		(ab , rest) <- readsPrec 10 inp])
	      input
	      ++
	      readParen (d > 9)
	      (\ inp ->
	       [((WildCardT aa) , rest) | ("WildCardT" , inp) <- lex inp ,
		(aa , rest) <- readsPrec 10 inp])
	      input

instance Read NotTerminal where
    readsPrec d input =
	      readParen (d > 9)
	      (\ inp ->
	       [((CharLiteralNT aa ab) , rest) |
		("CharLiteralNT" , inp) <- lex inp
		, (aa , inp) <- readsPrec 10 inp ,
		(ab , rest) <- readsPrec 10 inp])
	      input
	      ++
	      readParen (d > 9)
	      (\ inp ->
	       [((TokenRefNT aa ab) , rest) | ("TokenRefNT" , inp) <- lex inp ,
		(aa , inp) <- readsPrec 10 inp , (ab , rest) <- readsPrec 10 inp])
	      input

instance Read QualifiedID where
    readsPrec d input =
	      readParen (d > 9)
	      (\ inp ->
	       [((QualifiedID aa) , rest) | ("QualifiedID" , inp) <- lex inp ,
		(aa , rest) <- readsPrec 10 inp])
	      input

instance Read Id where
    readsPrec d input =
	      readParen (d > 9)
	      (\ inp ->
	       [((TokenRefId aa) , rest) | ("TokenRefId" , inp) <- lex inp ,
		(aa , rest) <- readsPrec 10 inp])
	      input
	      ++
	      readParen (d > 9)
	      (\ inp ->
	       [((RuleRefId aa) , rest) | ("RuleRefId" , inp) <- lex inp ,
		(aa , rest) <- readsPrec 10 inp])
	      input

--  Imported from other files :-
