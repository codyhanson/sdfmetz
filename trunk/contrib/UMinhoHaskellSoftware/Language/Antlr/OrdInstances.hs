module Language.Antlr.OrdInstances where

import Language.Antlr.Syntax
import Language.Antlr.EqInstances

{- Generated by DrIFT (Automatic class derivations for Haskell) -}
{-# LINE 1 "Syntax.hs" #-}
{-* Generated by DrIFT : Look, but Don't Touch. *-}
instance Ord GrammarHeader where
    compare (GrammarHeader aa ab) (GrammarHeader aa' ab') =
	    foldl (\x y -> if x == EQ then compare y EQ else y) EQ
	    [compare aa aa',compare ab ab']

instance Ord Grammar where
    compare (Grammar aa ab ac) (Grammar aa' ab' ac') =
	    foldl (\x y -> if x == EQ then compare y EQ else y) EQ
	    [compare aa aa',compare ab ab',compare ac ac']

instance Ord ClassDef where
    compare (ClassDef aa ab ac ad) (ClassDef aa' ab' ac' ad') =
	    foldl (\x y -> if x == EQ then compare y EQ else y) EQ
	    [compare aa aa',compare ab ab',compare ac ac',compare ad ad']

instance Ord OptionAssignmentSemi where
    compare (OptionAssignmentSemi aa ab) (OptionAssignmentSemi aa' ab')
	    =
	    foldl (\x y -> if x == EQ then compare y EQ else y) EQ
	    [compare aa aa',compare ab ab']

instance Ord OptionAssignment where
    compare (OptionAssignment aa ab) (OptionAssignment aa' ab') =
	    foldl (\x y -> if x == EQ then compare y EQ else y) EQ
	    [compare aa aa',compare ab ab']

instance Ord OptionsSpec where
    compare (OptionsSpec aa) (OptionsSpec aa') = compare aa aa'

instance Ord SingleOptionSpec where
    compare (LexOption aa) (LexOption aa') = compare aa aa'
    compare (LexOption aa) (Option aa' ab') = LT
    compare (Option aa ab) (LexOption aa') = GT
    compare (Option aa ab) (Option aa' ab') =
	    foldl (\x y -> if x == EQ then compare y EQ else y) EQ
	    [compare aa aa',compare ab ab']

instance Ord LexerOptionsSpec where
    compare (LexerOptionsSpec aa) (LexerOptionsSpec aa') =
	    compare aa aa'

instance Ord OptionValue where
    compare (IdValue aa) (IdValue aa') = compare aa aa'
    compare (IdValue aa) (StringValue aa') = LT
    compare (IdValue aa) (CharValue aa') = LT
    compare (IdValue aa) (IntValue aa') = LT
    compare (StringValue aa) (IdValue aa') = GT
    compare (StringValue aa) (StringValue aa') = compare aa aa'
    compare (StringValue aa) (CharValue aa') = LT
    compare (StringValue aa) (IntValue aa') = LT
    compare (CharValue aa) (IdValue aa') = GT
    compare (CharValue aa) (StringValue aa') = GT
    compare (CharValue aa) (CharValue aa') = compare aa aa'
    compare (CharValue aa) (IntValue aa') = LT
    compare (IntValue aa) (IdValue aa') = GT
    compare (IntValue aa) (StringValue aa') = GT
    compare (IntValue aa) (CharValue aa') = GT
    compare (IntValue aa) (IntValue aa') = compare aa aa'

instance Ord CharSet where
    compare (CharSet aa) (CharSet aa') = compare aa aa'

instance Ord SetBlockElement where
    compare (SetBlockElement aa ab) (SetBlockElement aa' ab') =
	    foldl (\x y -> if x == EQ then compare y EQ else y) EQ
	    [compare aa aa',compare ab ab']

instance Ord SingleTokenSpec where
    compare (TokenRefSpec aa ab ac) (TokenRefSpec aa' ab' ac') =
	    foldl (\x y -> if x == EQ then compare y EQ else y) EQ
	    [compare aa aa',compare ab ab',compare ac ac']
    compare (TokenRefSpec aa ab ac) (StringLitTokenSpec aa' ab') = LT
    compare (StringLitTokenSpec aa ab) (TokenRefSpec aa' ab' ac') = GT
    compare (StringLitTokenSpec aa ab) (StringLitTokenSpec aa' ab') =
	    foldl (\x y -> if x == EQ then compare y EQ else y) EQ
	    [compare aa aa',compare ab ab']

instance Ord TokensSpec where
    compare (TokensSpec aa) (TokensSpec aa') = compare aa aa'

instance Ord TokensSpecOptions where
    compare (TokensSpecOptions aa) (TokensSpecOptions aa') =
	    compare aa aa'

instance Ord SuperClass where
    compare (SuperClass aa) (SuperClass aa') = compare aa aa'

instance Ord ClassHeader where
    compare (LexClassHeader aa) (LexClassHeader aa') = compare aa aa'
    compare (LexClassHeader aa) (ClassHeader aa' ab' ac') = LT
    compare (ClassHeader aa ab ac) (LexClassHeader aa') = GT
    compare (ClassHeader aa ab ac) (ClassHeader aa' ab' ac') =
	    foldl (\x y -> if x == EQ then compare y EQ else y) EQ
	    [compare aa aa',compare ab ab',compare ac ac']

instance Ord Spec where
    compare (Spec aa ab ac ad) (Spec aa' ab' ac' ad') =
	    foldl (\x y -> if x == EQ then compare y EQ else y) EQ
	    [compare aa aa',compare ab ab',compare ac ac',compare ad ad']

instance Ord Rule where
    compare (Rule aa ab ac ad ae af ag ah ai aj ak)
	    (Rule aa' ab' ac' ad' ae' af' ag' ah' ai' aj' ak') =
	    foldl (\x y -> if x == EQ then compare y EQ else y) EQ
	    [compare aa aa',compare ab ab',compare ac ac',compare ad ad',
	     compare ae ae',compare af af',compare ag ag',compare ah ah',
	     compare ai ai',compare aj aj',compare ak ak']

instance Ord ThrowsSpec where
    compare (ThrowsSpec aa) (ThrowsSpec aa') = compare aa aa'

instance Ord Block where
    compare (Block aa) (Block aa') = compare aa aa'

instance Ord Alternative where
    compare (Alternative aa ab ac) (Alternative aa' ab' ac') =
	    foldl (\x y -> if x == EQ then compare y EQ else y) EQ
	    [compare aa aa',compare ab ab',compare ac ac']

instance Ord ExceptionSpec where
    compare (ExceptionSpec aa ab) (ExceptionSpec aa' ab') =
	    foldl (\x y -> if x == EQ then compare y EQ else y) EQ
	    [compare aa aa',compare ab ab']

instance Ord ExceptionSpecNoLabel where
    compare (ExceptionSpecNoLabel aa) (ExceptionSpecNoLabel aa') =
	    compare aa aa'

instance Ord ExceptionHandler where
    compare (ExceptionHandler aa ab) (ExceptionHandler aa' ab') =
	    foldl (\x y -> if x == EQ then compare y EQ else y) EQ
	    [compare aa aa',compare ab ab']

instance Ord Element where
    compare (Element aa ab) (Element aa' ab') =
	    foldl (\x y -> if x == EQ then compare y EQ else y) EQ
	    [compare aa aa',compare ab ab']

instance Ord ElementOptionSpec where
    compare (ElementOptionSpec aa) (ElementOptionSpec aa') =
	    compare aa aa'

instance Ord AssignElementBody where
    compare (RuleRefElt aa ab ac) (RuleRefElt aa' ab' ac') =
	    foldl (\x y -> if x == EQ then compare y EQ else y) EQ
	    [compare aa aa',compare ab ab',compare ac ac']
    compare (RuleRefElt aa ab ac) (TokenRefElt aa' ab') = LT
    compare (TokenRefElt aa ab) (RuleRefElt aa' ab' ac') = GT
    compare (TokenRefElt aa ab) (TokenRefElt aa' ab') =
	    foldl (\x y -> if x == EQ then compare y EQ else y) EQ
	    [compare aa aa',compare ab ab']

instance Ord NegatedElement where
    compare (NegatedNotTerminal aa) (NegatedNotTerminal aa') =
	    compare aa aa'
    compare (NegatedNotTerminal aa) (NegatedEbnf aa') = LT
    compare (NegatedEbnf aa) (NegatedNotTerminal aa') = GT
    compare (NegatedEbnf aa) (NegatedEbnf aa') = compare aa aa'

instance Ord NoAssignElementBody where
    compare (RuleRefEltNoAssign aa ab ac)
	    (RuleRefEltNoAssign aa' ab' ac') =
	    foldl (\x y -> if x == EQ then compare y EQ else y) EQ
	    [compare aa aa',compare ab ab',compare ac ac']
    compare (RuleRefEltNoAssign aa ab ac) (RangeElt aa') = LT
    compare (RuleRefEltNoAssign aa ab ac) (TerminalElt aa') = LT
    compare (RuleRefEltNoAssign aa ab ac) (NegatedElt aa') = LT
    compare (RuleRefEltNoAssign aa ab ac) (EbnfElt aa') = LT
    compare (RangeElt aa) (RuleRefEltNoAssign aa' ab' ac') = GT
    compare (RangeElt aa) (RangeElt aa') = compare aa aa'
    compare (RangeElt aa) (TerminalElt aa') = LT
    compare (RangeElt aa) (NegatedElt aa') = LT
    compare (RangeElt aa) (EbnfElt aa') = LT
    compare (TerminalElt aa) (RuleRefEltNoAssign aa' ab' ac') = GT
    compare (TerminalElt aa) (RangeElt aa') = GT
    compare (TerminalElt aa) (TerminalElt aa') = compare aa aa'
    compare (TerminalElt aa) (NegatedElt aa') = LT
    compare (TerminalElt aa) (EbnfElt aa') = LT
    compare (NegatedElt aa) (RuleRefEltNoAssign aa' ab' ac') = GT
    compare (NegatedElt aa) (RangeElt aa') = GT
    compare (NegatedElt aa) (TerminalElt aa') = GT
    compare (NegatedElt aa) (NegatedElt aa') = compare aa aa'
    compare (NegatedElt aa) (EbnfElt aa') = LT
    compare (EbnfElt aa) (RuleRefEltNoAssign aa' ab' ac') = GT
    compare (EbnfElt aa) (RangeElt aa') = GT
    compare (EbnfElt aa) (TerminalElt aa') = GT
    compare (EbnfElt aa) (NegatedElt aa') = GT
    compare (EbnfElt aa) (EbnfElt aa') = compare aa aa'

instance Ord ElementNoOptionSpec where
    compare (AssignElement aa ab ac) (AssignElement aa' ab' ac') =
	    foldl (\x y -> if x == EQ then compare y EQ else y) EQ
	    [compare aa aa',compare ab ab',compare ac ac']
    compare (AssignElement aa ab ac) (NoAssignElement aa' ab') = LT
    compare (AssignElement aa ab ac) (ActionElement aa') = LT
    compare (AssignElement aa ab ac) (SemPredElement aa') = LT
    compare (AssignElement aa ab ac) (TreeElement aa') = LT
    compare (NoAssignElement aa ab) (AssignElement aa' ab' ac') = GT
    compare (NoAssignElement aa ab) (NoAssignElement aa' ab') =
	    foldl (\x y -> if x == EQ then compare y EQ else y) EQ
	    [compare aa aa',compare ab ab']
    compare (NoAssignElement aa ab) (ActionElement aa') = LT
    compare (NoAssignElement aa ab) (SemPredElement aa') = LT
    compare (NoAssignElement aa ab) (TreeElement aa') = LT
    compare (ActionElement aa) (AssignElement aa' ab' ac') = GT
    compare (ActionElement aa) (NoAssignElement aa' ab') = GT
    compare (ActionElement aa) (ActionElement aa') = compare aa aa'
    compare (ActionElement aa) (SemPredElement aa') = LT
    compare (ActionElement aa) (TreeElement aa') = LT
    compare (SemPredElement aa) (AssignElement aa' ab' ac') = GT
    compare (SemPredElement aa) (NoAssignElement aa' ab') = GT
    compare (SemPredElement aa) (ActionElement aa') = GT
    compare (SemPredElement aa) (SemPredElement aa') = compare aa aa'
    compare (SemPredElement aa) (TreeElement aa') = LT
    compare (TreeElement aa) (AssignElement aa' ab' ac') = GT
    compare (TreeElement aa) (NoAssignElement aa' ab') = GT
    compare (TreeElement aa) (ActionElement aa') = GT
    compare (TreeElement aa) (SemPredElement aa') = GT
    compare (TreeElement aa) (TreeElement aa') = compare aa aa'

instance Ord Tree where
    compare (Tree aa ab) (Tree aa' ab') =
	    foldl (\x y -> if x == EQ then compare y EQ else y) EQ
	    [compare aa aa',compare ab ab']

instance Ord RootNode where
    compare (RootNode aa ab) (RootNode aa' ab') =
	    foldl (\x y -> if x == EQ then compare y EQ else y) EQ
	    [compare aa aa',compare ab ab']

instance Ord OptionsSpecOrAction where
    compare (OptionsSpecAndMaybeAction aa ab)
	    (OptionsSpecAndMaybeAction aa' ab') =
	    foldl (\x y -> if x == EQ then compare y EQ else y) EQ
	    [compare aa aa',compare ab ab']
    compare (OptionsSpecAndMaybeAction aa ab) (Action aa') = LT
    compare (Action aa) (OptionsSpecAndMaybeAction aa' ab') = GT
    compare (Action aa) (Action aa') = compare aa aa'

instance Ord RegExpOperator where
    compare (Question aa) (Question aa') = compare aa aa'
    compare (Question aa) (Star aa') = LT
    compare (Question aa) (Plus aa') = LT
    compare (Star aa) (Question aa') = GT
    compare (Star aa) (Star aa') = compare aa aa'
    compare (Star aa) (Plus aa') = LT
    compare (Plus aa) (Question aa') = GT
    compare (Plus aa) (Star aa') = GT
    compare (Plus aa) (Plus aa') = compare aa aa'

instance Ord EbnfBody where
    compare (EbnfBodyRegExp aa ab) (EbnfBodyRegExp aa' ab') =
	    foldl (\x y -> if x == EQ then compare y EQ else y) EQ
	    [compare aa aa',compare ab ab']
    compare (EbnfBodyRegExp aa ab) (EbnfBodyImplies aa') = LT
    compare (EbnfBodyImplies aa) (EbnfBodyRegExp aa' ab') = GT
    compare (EbnfBodyImplies aa) (EbnfBodyImplies aa') = compare aa aa'

instance Ord Ebnf where
    compare (Ebnf aa ab ac) (Ebnf aa' ab' ac') =
	    foldl (\x y -> if x == EQ then compare y EQ else y) EQ
	    [compare aa aa',compare ab ab',compare ac ac']

instance Ord Ast_type_spec where
    compare (CaretAstType aa) (CaretAstType aa') = compare aa aa'
    compare (CaretAstType aa) (BangAstType aa') = LT
    compare (CaretAstType aa) (NoAstType) = LT
    compare (BangAstType aa) (CaretAstType aa') = GT
    compare (BangAstType aa) (BangAstType aa') = compare aa aa'
    compare (BangAstType aa) (NoAstType) = LT
    compare NoAstType (CaretAstType aa) = GT
    compare NoAstType (BangAstType aa) = GT
    compare NoAstType (NoAstType) = EQ

instance Ord TokenRefOrStringLit where
    compare (TokenRef aa) (TokenRef aa') = compare aa aa'
    compare (TokenRef aa) (StringLit aa') = LT
    compare (StringLit aa) (TokenRef aa') = GT
    compare (StringLit aa) (StringLit aa') = compare aa aa'

instance Ord Range where
    compare (CharRange aa ab ac) (CharRange aa' ab' ac') =
	    foldl (\x y -> if x == EQ then compare y EQ else y) EQ
	    [compare aa aa',compare ab ab',compare ac ac']
    compare (CharRange aa ab ac) (StringTokenRange aa' ab' ac') = LT
    compare (StringTokenRange aa ab ac) (CharRange aa' ab' ac') = GT
    compare (StringTokenRange aa ab ac) (StringTokenRange aa' ab' ac')
	    =
	    foldl (\x y -> if x == EQ then compare y EQ else y) EQ
	    [compare aa aa',compare ab ab',compare ac ac']

instance Ord Terminal where
    compare (CharLiteralT aa ab) (CharLiteralT aa' ab') =
	    foldl (\x y -> if x == EQ then compare y EQ else y) EQ
	    [compare aa aa',compare ab ab']
    compare (CharLiteralT aa ab) (TokenRefT aa' ab' ac') = LT
    compare (CharLiteralT aa ab) (StringLiteralT aa' ab') = LT
    compare (CharLiteralT aa ab) (WildCardT aa') = LT
    compare (TokenRefT aa ab ac) (CharLiteralT aa' ab') = GT
    compare (TokenRefT aa ab ac) (TokenRefT aa' ab' ac') =
	    foldl (\x y -> if x == EQ then compare y EQ else y) EQ
	    [compare aa aa',compare ab ab',compare ac ac']
    compare (TokenRefT aa ab ac) (StringLiteralT aa' ab') = LT
    compare (TokenRefT aa ab ac) (WildCardT aa') = LT
    compare (StringLiteralT aa ab) (CharLiteralT aa' ab') = GT
    compare (StringLiteralT aa ab) (TokenRefT aa' ab' ac') = GT
    compare (StringLiteralT aa ab) (StringLiteralT aa' ab') =
	    foldl (\x y -> if x == EQ then compare y EQ else y) EQ
	    [compare aa aa',compare ab ab']
    compare (StringLiteralT aa ab) (WildCardT aa') = LT
    compare (WildCardT aa) (CharLiteralT aa' ab') = GT
    compare (WildCardT aa) (TokenRefT aa' ab' ac') = GT
    compare (WildCardT aa) (StringLiteralT aa' ab') = GT
    compare (WildCardT aa) (WildCardT aa') = compare aa aa'

instance Ord NotTerminal where
    compare (CharLiteralNT aa ab) (CharLiteralNT aa' ab') =
	    foldl (\x y -> if x == EQ then compare y EQ else y) EQ
	    [compare aa aa',compare ab ab']
    compare (CharLiteralNT aa ab) (TokenRefNT aa' ab') = LT
    compare (TokenRefNT aa ab) (CharLiteralNT aa' ab') = GT
    compare (TokenRefNT aa ab) (TokenRefNT aa' ab') =
	    foldl (\x y -> if x == EQ then compare y EQ else y) EQ
	    [compare aa aa',compare ab ab']

instance Ord QualifiedID where
    compare (QualifiedID aa) (QualifiedID aa') = compare aa aa'

instance Ord Id where
    compare (TokenRefId aa) (TokenRefId aa') = compare aa aa'
    compare (TokenRefId aa) (RuleRefId aa') = LT
    compare (RuleRefId aa) (TokenRefId aa') = GT
    compare (RuleRefId aa) (RuleRefId aa') = compare aa aa'

--  Imported from other files :-
